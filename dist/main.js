!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){"use strict";var i=n(6),o=n(5),r=n(8),s=n(2),a=n(1);function l(e,t){const n=document.createElement("table");!function(e){const t=["Имя игрока","Кол-во побежденных монстров"],n=document.createElement("tr");for(let e=0;e<t.length;e+=1){const i=document.createElement("th");i.innerText=t[e],n.appendChild(i)}e.appendChild(n)}(n),function(e,t){for(let n=0;n<t.length;n+=1){const i=document.createElement("tr");for(const e in t[n]){const o=document.createElement("td");o.innerText=t[n][e],i.appendChild(o)}e.appendChild(i)}}(n,t),e.appendChild(n)}function c(e){Object(s.a)(document.body);const t=document.createElement("div");t.classList.add("records-container"),document.body.appendChild(t),function(e,t){const n=document.createElement("h2");n.classList.add("records-table-title"),n.innerText=t,e.appendChild(n)}(t,"Таблица рекордов"),l(t,e),function(e){const t=document.createElement("button");t.classList.add("play-button"),t.innerHTML="Вернуться к игре",e.appendChild(t),t.addEventListener("click",r.a),Object(a.c)(r.a)}(t),h=0}var u=n(9);function d(e){Object(s.c)();const t=document.getElementsByClassName("modal-window")[0];t.classList.add("new-level-modal-window"),document.getElementsByClassName("close")[0].remove(),function(e,t){const n=document.createElement("h3");n.classList.add("next-level-title"),n.innerHTML=`Уровень ${t}`,e.appendChild(n)}(t,e),setTimeout(()=>{Object(s.b)(),Object(i.a)(),document.getElementsByClassName("character-name")[1].innerText=Object(u.a)()},4e3);const n=document.getElementsByClassName("health-bar")[1],o=document.getElementsByClassName("percent-health-bar")[1];o.style.width=`${n.clientWidth}px`,o.innerText="100%"}let h=0;const p=100;function f(e,t){let n;"player"===e?n=0:"monster"===e&&(n=1);const i=document.getElementsByClassName("percent-health-bar")[n],o=document.getElementsByClassName("health-bar")[n];let r=parseInt(i.innerText,10)+t;if(r>p&&(r=p),i.style.width=`${o.clientWidth*r/p}px`,i.innerText=`${r}%`,r<=0)if("player"===e){const e=JSON.parse(localStorage.getItem("RecordsArr"));e[e.length-1].killedMonsersAmmount=h,localStorage.setItem("RecordsArr",JSON.stringify(e)),c(e)}else"monster"===e&&d((h+=1)+1)}n.d(t,"c",function(){return g}),n.d(t,"b",function(){return v}),n.d(t,"a",function(){return y}),n.d(t,"e",function(){return b}),n.d(t,"d",function(){return x});const m=25;function g(e,t){const n=document.createElement("div");n.classList.add("task-text"),n.innerHTML=t,e.appendChild(n)}function v(e){const t=document.createElement("input");t.classList.add("task-input"),t.setAttribute("placeholder","Ведите ответ"),t.id="task-input",e.appendChild(t)}function y(e,t){const n=document.createElement("button");n.classList.add("task-button"),n.innerHTML="Ответить",e.appendChild(n),n.addEventListener("click",t)}function b(e,t){return Math.floor(Math.random()*(t-e+1))+e}function x(e){document.getElementsByClassName("modal-window")[0].remove(),document.getElementsByClassName("modal-window-cover-div")[0].remove(),e?(Object(i.b)(o.a.animation),"addPlayerHealth"===o.a.animation?"100%"!==document.getElementsByClassName("percent-health-bar")[0].innerText&&f("player",m):f("monster",-m)):(Object(i.b)("monsterGoingToHit"),f("player",-m))}},function(e,t,n){"use strict";n.d(t,"c",function(){return d}),n.d(t,"b",function(){return h}),n.d(t,"a",function(){return p});var i=n(2);const o=13,r=27,s=39,a=38,l=37,c=40;let u;function d(e){document.onkeydown=function(t){const n=t||window.event;n.keyCode===o&&e(),n.stopPropagation()}}function h(e){u=document.onkeydown,document.onkeydown=function(t){const n=t||window.event;n.keyCode===o?e():n.keyCode===r&&(document.onkeydown=u,"undefined"!==document.getElementsByClassName("modal-window")[0]&&Object(i.b)()),n.stopPropagation()}}function p(e,t,n){let d=0;const h=document.getElementsByClassName(`${t}`).length;let p=document.getElementsByClassName(`${t}`)[d];p.focus(),u=document.onkeydown,document.onkeydown=function(f){const m=f||window.event;switch(m.keyCode){case l:case c:-1===(d-=1)&&(d=h-1),(p=document.getElementsByClassName(`${t}`)[d]).focus();break;case a:case s:(d+=1)===h&&(d=0),(p=document.getElementsByClassName(`${t}`)[d]).focus();break;case o:e();break;case r:n&&(document.onkeydown=u,"undefined"!==document.getElementsByClassName("modal-window")[0]&&Object(i.b)())}m.stopPropagation()}}},function(e,t,n){"use strict";function i(){document.getElementsByClassName("modal-window")[0].remove(),document.getElementsByClassName("modal-window-cover-div")[0].remove()}function o(e){let t=e.firstChild;for(;t;)e.removeChild(t),t=e.firstChild}function r(){!function(){const e=document.createElement("div");e.classList.add("modal-window-cover-div"),document.body.appendChild(e)}();const e=document.createElement("div");e.classList.add("modal-window"),document.body.appendChild(e),function(e){const t=document.createElement("span");t.classList.add("close"),e.appendChild(t),t.addEventListener("click",i,!1)}(e)}n.d(t,"b",function(){return i}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return r})},function(e,t,n){var i,o,r;
/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */
/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */
o="undefined"!=typeof window?window:this,r=function(n,o){var r=[],s=n.document,a=r.slice,l=r.concat,c=r.push,u=r.indexOf,d={},h=d.toString,p=d.hasOwnProperty,f={},m=function(e,t){return new m.fn.init(e,t)},g=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,v=/^-ms-/,y=/-([\da-z])/gi,b=function(e,t){return t.toUpperCase()};function x(e){var t=!!e&&"length"in e&&e.length,n=m.type(e);return"function"!==n&&!m.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}m.fn=m.prototype={jquery:"1.12.4",constructor:m,selector:"",length:0,toArray:function(){return a.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:a.call(this)},pushStack:function(e){var t=m.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return m.each(this,e)},map:function(e){return this.pushStack(m.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},m.extend=m.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||m.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(o=arguments[a]))for(i in o)e=s[i],s!==(n=o[i])&&(c&&n&&(m.isPlainObject(n)||(t=m.isArray(n)))?(t?(t=!1,r=e&&m.isArray(e)?e:[]):r=e&&m.isPlainObject(e)?e:{},s[i]=m.extend(c,r,n)):void 0!==n&&(s[i]=n));return s},m.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===m.type(e)},isArray:Array.isArray||function(e){return"array"===m.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!m.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==m.type(e)||e.nodeType||m.isWindow(e))return!1;try{if(e.constructor&&!p.call(e,"constructor")&&!p.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!f.ownFirst)for(t in e)return p.call(e,t);for(t in e);return void 0===t||p.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e},globalEval:function(e){e&&m.trim(e)&&(n.execScript||function(e){n.eval.call(n,e)})(e)},camelCase:function(e){return e.replace(v,"ms-").replace(y,b)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(x(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(g,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?m.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){var i;if(t){if(u)return u.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;)e[o++]=t[i++];if(n!=n)for(;void 0!==t[i];)e[o++]=t[i++];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(x(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return l.apply([],s)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(o=e[t],t=e,e=o),m.isFunction(e))return n=a.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||m.guid++,i},now:function(){return+new Date},support:f}),"function"==typeof Symbol&&(m.fn[Symbol.iterator]=r[Symbol.iterator]),m.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var w=
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
function(e){var t,n,i,o,r,s,a,l,c,u,d,h,p,f,m,g,v,y,b,x="sizzle"+1*new Date,w=e.document,_=0,C=0,E=re(),T=re(),k=re(),N=function(e,t){return e===t&&(d=!0),0},S=1<<31,P={}.hasOwnProperty,L=[],O=L.pop,A=L.push,D=L.push,j=L.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",W="\\["+M+"*("+B+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+M+"*\\]",q=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),$=new RegExp("^"+M+"*,"+M+"*"),X=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),U=new RegExp(q),Y=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,ee=/'|\\/g,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ie=function(){h()};try{D.apply(L=j.call(w.childNodes),w.childNodes),L[w.childNodes.length].nodeType}catch(e){D={apply:L.length?function(e,t){A.apply(e,j.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,o){var r,a,c,u,d,f,v,y,_=t&&t.ownerDocument,C=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return i;if(!o&&((t?t.ownerDocument||t:w)!==p&&h(t),t=t||p,m)){if(11!==C&&(f=Q.exec(e)))if(r=f[1]){if(9===C){if(!(c=t.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(_&&(c=_.getElementById(r))&&b(t,c)&&c.id===r)return i.push(c),i}else{if(f[2])return D.apply(i,t.getElementsByTagName(e)),i;if((r=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(i,t.getElementsByClassName(r)),i}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))){if(1!==C)_=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(ee,"\\$&"):t.setAttribute("id",u=x),a=(v=s(e)).length,d=Y.test(u)?"#"+u:"[id='"+u+"']";a--;)v[a]=d+" "+me(v[a]);y=v.join(","),_=Z.test(e)&&pe(t.parentNode)||t}if(y)try{return D.apply(i,_.querySelectorAll(y)),i}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(R,"$1"),t,i,o)}function re(){var e=[];return function t(n,o){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[x]=!0,e}function ae(e){var t=p.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=t}function ce(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||S)-(~e.sourceIndex||S);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return se(function(t){return t=+t,se(function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},r=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},h=oe.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:w;return s!==p&&9===s.nodeType&&s.documentElement?(f=(p=s).documentElement,m=!r(p),(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.attributes=ae(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ae(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ae(function(e){return f.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}},i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=J.test(p.querySelectorAll))&&(ae(function(e){f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")}),ae(function(e){var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+M+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ae(function(e){n.disconnectedMatch=y.call(e,"div"),y.call(e,"[s!='']:x"),v.push("!=",q)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(f.compareDocumentPosition),b=t||J.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},N=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===p||e.ownerDocument===w&&b(w,e)?-1:t===p||t.ownerDocument===w&&b(w,t)?1:u?I(u,e)-I(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e===p?-1:t===p?1:o?-1:r?1:u?I(u,e)-I(u,t):0;if(o===r)return ce(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ce(s[i],a[i]):s[i]===w?-1:a[i]===w?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&h(e),t=t.replace(z,"='$1']"),n.matchesSelector&&m&&!k[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&h(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&h(e);var o=i.attrHandle[t.toLowerCase()],r=o&&P.call(i.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==r?r:n.attributes||!m?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],o=0,r=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(N),d){for(;t=e[r++];)t===e[r]&&(o=i.push(r));for(;o--;)e.splice(i[o],1)}return u=null,e},o=oe.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:se,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var o=oe.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,h,p,f,m=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(r){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(b=(p=(c=(u=(d=(h=g)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===_&&c[1])&&c[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(b=p=0)||f.pop();)if(1===h.nodeType&&++b&&h===t){u[e]=[_,p,b];break}}else if(y&&(b=p=(c=(u=(d=(h=t)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===_&&c[1]),!1===b)for(;(h=++p&&h&&h[m]||(b=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((u=(d=h[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[_,b]),h!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var i,r=o(e,t),s=r.length;s--;)e[i=I(e,r[s])]=!(n[i]=r[s])}):function(e){return o(e,0,n)}):o}},pseudos:{not:se(function(e){var t=[],n=[],i=a(e.replace(R,"$1"));return i[x]?se(function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))}):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:se(function(e){return Y.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return V.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=ue(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=de(t);function fe(){}function me(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ge(e,t,n){var i=t.dir,o=n&&"parentNode"===i,r=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var a,l,c,u=[_,r];if(s){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||o){if((a=(l=(c=t[x]||(t[x]={}))[t.uniqueID]||(c[t.uniqueID]={}))[i])&&a[0]===_&&a[1]===r)return u[2]=a[2];if(l[i]=u,u[2]=e(t,n,s))return!0}}}function ve(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function ye(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function be(e,t,n,i,o,r){return i&&!i[x]&&(i=be(i)),o&&!o[x]&&(o=be(o,r)),se(function(r,s,a,l){var c,u,d,h=[],p=[],f=s.length,m=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!r&&t?m:ye(m,h,e,a,l),v=n?o||(r?e:f||i)?[]:s:g;if(n&&n(g,v,a,l),i)for(c=ye(v,p),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[p[u]]=!(g[p[u]]=d));if(r){if(o||e){if(o){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);o(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=o?I(r,d):h[u])>-1&&(r[c]=!(s[c]=d))}}else v=ye(v===s?v.splice(f,v.length):v),o?o(null,s,v,l):D.apply(s,v)})}function xe(e){for(var t,n,o,r=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,u=ge(function(e){return e===t},a,!0),d=ge(function(e){return I(t,e)>-1},a,!0),h=[function(e,n,i){var o=!s&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,o}];l<r;l++)if(n=i.relative[e[l].type])h=[ge(ve(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(o=++l;o<r&&!i.relative[e[o].type];o++);return be(l>1&&ve(h),l>1&&me(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(R,"$1"),n,l<o&&xe(e.slice(l,o)),o<r&&xe(e=e.slice(o)),o<r&&me(e))}h.push(n)}return ve(h)}return fe.prototype=i.filters=i.pseudos,i.setFilters=new fe,s=oe.tokenize=function(e,t){var n,o,r,s,a,l,c,u=T[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=i.preFilter;a;){for(s in n&&!(o=$.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=X.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(R," ")}),a=a.slice(n.length)),i.filter)!(o=K[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):T(e,l).slice(0)},a=oe.compile=function(e,t){var n,o=[],r=[],a=k[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=xe(t[n]))[x]?o.push(a):r.push(a);(a=k(e,function(e,t){var n=t.length>0,o=e.length>0,r=function(r,s,a,l,u){var d,f,g,v=0,y="0",b=r&&[],x=[],w=c,C=r||o&&i.find.TAG("*",u),E=_+=null==w?1:Math.random()||.1,T=C.length;for(u&&(c=s===p||s||u);y!==T&&null!=(d=C[y]);y++){if(o&&d){for(f=0,s||d.ownerDocument===p||(h(d),a=!m);g=e[f++];)if(g(d,s||p,a)){l.push(d);break}u&&(_=E)}n&&((d=!g&&d)&&v--,r&&b.push(d))}if(v+=y,n&&y!==v){for(f=0;g=t[f++];)g(b,x,s,a);if(r){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=O.call(l));x=ye(x)}D.apply(l,x),u&&!r&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return u&&(_=E,c=w),b};return n?se(r):r}(r,o))).selector=e}return a},l=oe.select=function(e,t,o,r){var l,c,u,d,h,p="function"==typeof e&&e,f=!r&&s(e=p.selector||e);if(o=o||[],1===f.length){if((c=f[0]=f[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&n.getById&&9===t.nodeType&&m&&i.relative[c[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return o;p&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(l=K.needsContext.test(e)?0:c.length;l--&&(u=c[l],!i.relative[d=u.type]);)if((h=i.find[d])&&(r=h(u.matches[0].replace(te,ne),Z.test(c[0].type)&&pe(t.parentNode)||t))){if(c.splice(l,1),!(e=r.length&&me(c)))return D.apply(o,r),o;break}}return(p||a(e,f))(r,t,!m,o,!t||Z.test(e)&&pe(t.parentNode)||t),o},n.sortStable=x.split("").sort(N).join("")===x,n.detectDuplicates=!!d,h(),n.sortDetached=ae(function(e){return 1&e.compareDocumentPosition(p.createElement("div"))}),ae(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ae(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ae(function(e){return null==e.getAttribute("disabled")})||le(H,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);m.find=w,m.expr=w.selectors,m.expr[":"]=m.expr.pseudos,m.uniqueSort=m.unique=w.uniqueSort,m.text=w.getText,m.isXMLDoc=w.isXML,m.contains=w.contains;var _=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&m(e).is(n))break;i.push(e)}return i},C=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=m.expr.match.needsContext,T=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,k=/^.[^:#\[\.,]*$/;function N(e,t,n){if(m.isFunction(t))return m.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return m.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(k.test(t))return m.filter(t,e,n);t=m.filter(t,e)}return m.grep(e,function(e){return m.inArray(e,t)>-1!==n})}m.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?m.find.matchesSelector(i,e)?[i]:[]:m.find.matches(e,m.grep(t,function(e){return 1===e.nodeType}))},m.fn.extend({find:function(e){var t,n=[],i=this,o=i.length;if("string"!=typeof e)return this.pushStack(m(e).filter(function(){for(t=0;t<o;t++)if(m.contains(i[t],this))return!0}));for(t=0;t<o;t++)m.find(e,i[t],n);return(n=this.pushStack(o>1?m.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&E.test(e)?m(e):e||[],!1).length}});var S,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(m.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||S,"string"==typeof e){if(!(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:P.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof m?t[0]:t,m.merge(this,m.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),T.test(i[1])&&m.isPlainObject(t))for(i in t)m.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}if((o=s.getElementById(i[2]))&&o.parentNode){if(o.id!==i[2])return S.find(e);this.length=1,this[0]=o}return this.context=s,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):m.isFunction(e)?void 0!==n.ready?n.ready(e):e(m):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),m.makeArray(e,this))}).prototype=m.fn,S=m(s);var L=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function A(e,t){do{e=e[t]}while(e&&1!==e.nodeType);return e}m.fn.extend({has:function(e){var t,n=m(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(m.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,o=this.length,r=[],s=E.test(e)||"string"!=typeof e?m(e,t||this.context):0;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&m.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?m.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?m.inArray(this[0],m(e)):m.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(m.uniqueSort(m.merge(this.get(),m(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),m.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return A(e,"nextSibling")},prev:function(e){return A(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return m.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:m.merge([],e.childNodes)}},function(e,t){m.fn[e]=function(n,i){var o=m.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=m.filter(i,o)),this.length>1&&(O[e]||(o=m.uniqueSort(o)),L.test(e)&&(o=o.reverse())),this.pushStack(o)}});var D,j,I=/\S+/g;function H(){s.addEventListener?(s.removeEventListener("DOMContentLoaded",M),n.removeEventListener("load",M)):(s.detachEvent("onreadystatechange",M),n.detachEvent("onload",M))}function M(){(s.addEventListener||"load"===n.event.type||"complete"===s.readyState)&&(H(),m.ready())}for(j in m.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return m.each(e.match(I)||[],function(e,n){t[n]=!0}),t}(e):m.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){m.each(n,function(n,i){m.isFunction(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==m.type(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return m.each(arguments,function(e,t){for(var n;(n=m.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--}),this},has:function(e){return e?m.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=!0,n||c.disable(),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},m.extend({Deferred:function(e){var t=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var e=arguments;return m.Deferred(function(n){m.each(t,function(t,r){var s=m.isFunction(e[t])&&e[t];o[r[1]](function(){var e=s&&s.apply(this,arguments);e&&m.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?m.extend(e,i):i}},o={};return i.pipe=i.then,m.each(t,function(e,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t,n,i,o=0,r=a.call(arguments),s=r.length,l=1!==s||e&&m.isFunction(e.promise)?s:0,c=1===l?e:m.Deferred(),u=function(e,n,i){return function(o){n[e]=this,i[e]=arguments.length>1?a.call(arguments):o,i===t?c.notifyWith(n,i):--l||c.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);o<s;o++)r[o]&&m.isFunction(r[o].promise)?r[o].promise().progress(u(o,n,t)).done(u(o,i,r)).fail(c.reject):--l;return l||c.resolveWith(i,r),c.promise()}}),m.fn.ready=function(e){return m.ready.promise().done(e),this},m.extend({isReady:!1,readyWait:1,holdReady:function(e){e?m.readyWait++:m.ready(!0)},ready:function(e){(!0===e?--m.readyWait:m.isReady)||(m.isReady=!0,!0!==e&&--m.readyWait>0||(D.resolveWith(s,[m]),m.fn.triggerHandler&&(m(s).triggerHandler("ready"),m(s).off("ready"))))}}),m.ready.promise=function(e){if(!D)if(D=m.Deferred(),"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll)n.setTimeout(m.ready);else if(s.addEventListener)s.addEventListener("DOMContentLoaded",M),n.addEventListener("load",M);else{s.attachEvent("onreadystatechange",M),n.attachEvent("onload",M);var t=!1;try{t=null==n.frameElement&&s.documentElement}catch(e){}t&&t.doScroll&&function e(){if(!m.isReady){try{t.doScroll("left")}catch(t){return n.setTimeout(e,50)}H(),m.ready()}}()}return D.promise(e)},m.ready.promise(),m(f))break;f.ownFirst="0"===j,f.inlineBlockNeedsLayout=!1,m(function(){var e,t,n,i;(n=s.getElementsByTagName("body")[0])&&n.style&&(t=s.createElement("div"),(i=s.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),void 0!==t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",f.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=s.createElement("div");f.deleteExpando=!0;try{delete e.test}catch(e){f.deleteExpando=!1}e=null}();var B,W=function(e){var t=m.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)},q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,F=/([A-Z])/g;function R(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(F,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:q.test(n)?m.parseJSON(n):n)}catch(e){}m.data(e,t,n)}else n=void 0}return n}function $(e){var t;for(t in e)if(("data"!==t||!m.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function X(e,t,n,i){if(W(e)){var o,s,a=m.expando,l=e.nodeType,c=l?m.cache:e,u=l?e[a]:e[a]&&a;if(u&&c[u]&&(i||c[u].data)||void 0!==n||"string"!=typeof t)return u||(u=l?e[a]=r.pop()||m.guid++:a),c[u]||(c[u]=l?{}:{toJSON:m.noop}),"object"!=typeof t&&"function"!=typeof t||(i?c[u]=m.extend(c[u],t):c[u].data=m.extend(c[u].data,t)),s=c[u],i||(s.data||(s.data={}),s=s.data),void 0!==n&&(s[m.camelCase(t)]=n),"string"==typeof t?null==(o=s[t])&&(o=s[m.camelCase(t)]):o=s,o}}function z(e,t,n){if(W(e)){var i,o,r=e.nodeType,s=r?m.cache:e,a=r?e[m.expando]:m.expando;if(s[a]){if(t&&(i=n?s[a]:s[a].data)){o=(t=m.isArray(t)?t.concat(m.map(t,m.camelCase)):t in i?[t]:(t=m.camelCase(t))in i?[t]:t.split(" ")).length;for(;o--;)delete i[t[o]];if(n?!$(i):!m.isEmptyObject(i))return}(n||(delete s[a].data,$(s[a])))&&(r?m.cleanData([e],!0):f.deleteExpando||s!=s.window?delete s[a]:s[a]=void 0)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?m.cache[e[m.expando]]:e[m.expando])&&!$(e)},data:function(e,t,n){return X(e,t,n)},removeData:function(e,t){return z(e,t)},_data:function(e,t,n){return X(e,t,n,!0)},_removeData:function(e,t){return z(e,t,!0)}}),m.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=m.data(r),1===r.nodeType&&!m._data(r,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&R(r,i=m.camelCase(i.slice(5)),o[i]);m._data(r,"parsedAttrs",!0)}return o}return"object"==typeof e?this.each(function(){m.data(this,e)}):arguments.length>1?this.each(function(){m.data(this,e,t)}):r?R(r,e,m.data(r,e)):void 0},removeData:function(e){return this.each(function(){m.removeData(this,e)})}}),m.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=m._data(e,t),n&&(!i||m.isArray(n)?i=m._data(e,t,m.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=m.queue(e,t),i=n.length,o=n.shift(),r=m._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){m.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return m._data(e,n)||m._data(e,n,{empty:m.Callbacks("once memory").add(function(){m._removeData(e,t+"queue"),m._removeData(e,n)})})}}),m.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?m.queue(this[0],e):void 0===t?this:this.each(function(){var n=m.queue(this,e,t);m._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&m.dequeue(this,e)})},dequeue:function(e){return this.each(function(){m.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=m.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=m._data(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}}),f.shrinkWrapBlocks=function(){return null!=B?B:(B=!1,(t=s.getElementsByTagName("body")[0])&&t.style?(e=s.createElement("div"),(n=s.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(s.createElement("div")).style.width="5px",B=3!==e.offsetWidth),t.removeChild(n),B):void 0);var e,t,n};var U=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Y=new RegExp("^(?:([+-])=|)("+U+")([a-z%]*)$","i"),K=["Top","Right","Bottom","Left"],G=function(e,t){return e=t||e,"none"===m.css(e,"display")||!m.contains(e.ownerDocument,e)};function V(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return m.css(e,t,"")},l=a(),c=n&&n[3]||(m.cssNumber[t]?"":"px"),u=(m.cssNumber[t]||"px"!==c&&+l)&&Y.exec(m.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=r=r||".5",m.style(e,t,u+c)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var J,Q,Z,ee=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===m.type(n))for(a in o=!0,n)ee(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,m.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(m(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},te=/^(?:checkbox|radio)$/i,ne=/<([\w:-]+)/,ie=/^$|\/(?:java|ecma)script/i,oe=/^\s+/,re="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function se(e){var t=re.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}J=s.createElement("div"),Q=s.createDocumentFragment(),Z=s.createElement("input"),J.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",f.leadingWhitespace=3===J.firstChild.nodeType,f.tbody=!J.getElementsByTagName("tbody").length,f.htmlSerialize=!!J.getElementsByTagName("link").length,f.html5Clone="<:nav></:nav>"!==s.createElement("nav").cloneNode(!0).outerHTML,Z.type="checkbox",Z.checked=!0,Q.appendChild(Z),f.appendChecked=Z.checked,J.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!J.cloneNode(!0).lastChild.defaultValue,Q.appendChild(J),(Z=s.createElement("input")).setAttribute("type","radio"),Z.setAttribute("checked","checked"),Z.setAttribute("name","t"),J.appendChild(Z),f.checkClone=J.cloneNode(!0).cloneNode(!0).lastChild.checked,f.noCloneEvent=!!J.addEventListener,J[m.expando]=1,f.attributes=!J.getAttribute(m.expando);var ae={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:f.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};function le(e,t){var n,i,o=0,r=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!r)for(r=[],n=e.childNodes||e;null!=(i=n[o]);o++)!t||m.nodeName(i,t)?r.push(i):m.merge(r,le(i,t));return void 0===t||t&&m.nodeName(e,t)?m.merge([e],r):r}function ce(e,t){for(var n,i=0;null!=(n=e[i]);i++)m._data(n,"globalEval",!t||m._data(t[i],"globalEval"))}ae.optgroup=ae.option,ae.tbody=ae.tfoot=ae.colgroup=ae.caption=ae.thead,ae.th=ae.td;var ue=/<|&#?\w+;/,de=/<tbody/i;function he(e){te.test(e.type)&&(e.defaultChecked=e.checked)}function pe(e,t,n,i,o){for(var r,s,a,l,c,u,d,h=e.length,p=se(t),g=[],v=0;v<h;v++)if((s=e[v])||0===s)if("object"===m.type(s))m.merge(g,s.nodeType?[s]:s);else if(ue.test(s)){for(l=l||p.appendChild(t.createElement("div")),c=(ne.exec(s)||["",""])[1].toLowerCase(),d=ae[c]||ae._default,l.innerHTML=d[1]+m.htmlPrefilter(s)+d[2],r=d[0];r--;)l=l.lastChild;if(!f.leadingWhitespace&&oe.test(s)&&g.push(t.createTextNode(oe.exec(s)[0])),!f.tbody)for(r=(s="table"!==c||de.test(s)?"<table>"!==d[1]||de.test(s)?0:l:l.firstChild)&&s.childNodes.length;r--;)m.nodeName(u=s.childNodes[r],"tbody")&&!u.childNodes.length&&s.removeChild(u);for(m.merge(g,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=p.lastChild}else g.push(t.createTextNode(s));for(l&&p.removeChild(l),f.appendChecked||m.grep(le(g,"input"),he),v=0;s=g[v++];)if(i&&m.inArray(s,i)>-1)o&&o.push(s);else if(a=m.contains(s.ownerDocument,s),l=le(p.appendChild(s),"script"),a&&ce(l),n)for(r=0;s=l[r++];)ie.test(s.type||"")&&n.push(s);return l=null,p}!function(){var e,t,i=s.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})t="on"+e,(f[e]=t in n)||(i.setAttribute(t,"t"),f[e]=!1===i.attributes[t].expando);i=null}();var fe=/^(?:input|select|textarea)$/i,me=/^key/,ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ve=/^(?:focusinfocus|focusoutblur)$/,ye=/^([^.]*)(?:\.(.+)|)/;function be(){return!0}function xe(){return!1}function we(){try{return s.activeElement}catch(e){}}function _e(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)_e(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=xe;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return m().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=m.guid++)),e.each(function(){m.event.add(this,t,o,i,n)})}m.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,h,p,f,g,v=m._data(e);if(v){for(n.handler&&(n=(l=n).handler,o=l.selector),n.guid||(n.guid=m.guid++),(s=v.events)||(s=v.events={}),(u=v.handle)||((u=v.handle=function(e){return void 0===m||e&&m.event.triggered===e.type?void 0:m.event.dispatch.apply(u.elem,arguments)}).elem=e),a=(t=(t||"").match(I)||[""]).length;a--;)p=g=(r=ye.exec(t[a])||[])[1],f=(r[2]||"").split(".").sort(),p&&(c=m.event.special[p]||{},p=(o?c.delegateType:c.bindType)||p,c=m.event.special[p]||{},d=m.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&m.expr.match.needsContext.test(o),namespace:f.join(".")},l),(h=s[p])||((h=s[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,f,u)||(e.addEventListener?e.addEventListener(p,u,!1):e.attachEvent&&e.attachEvent("on"+p,u))),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,d):h.push(d),m.event.global[p]=!0);e=null}},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,h,p,f,g,v=m.hasData(e)&&m._data(e);if(v&&(u=v.events)){for(c=(t=(t||"").match(I)||[""]).length;c--;)if(p=g=(a=ye.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(d=m.event.special[p]||{},h=u[p=(i?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=r=h.length;r--;)s=h[r],!o&&g!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(h.splice(r,1),s.selector&&h.delegateCount--,d.remove&&d.remove.call(e,s));l&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,v.handle)||m.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)m.event.remove(e,p+t[c],n,i,!0);m.isEmptyObject(u)&&(delete v.handle,m._removeData(e,"events"))}},trigger:function(e,t,i,o){var r,a,l,c,u,d,h,f=[i||s],g=p.call(e,"type")?e.type:e,v=p.call(e,"namespace")?e.namespace.split("."):[];if(l=d=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!ve.test(g+m.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),a=g.indexOf(":")<0&&"on"+g,(e=e[m.expando]?e:new m.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:m.makeArray(t,[e]),u=m.event.special[g]||{},o||!u.trigger||!1!==u.trigger.apply(i,t))){if(!o&&!u.noBubble&&!m.isWindow(i)){for(c=u.delegateType||g,ve.test(c+g)||(l=l.parentNode);l;l=l.parentNode)f.push(l),d=l;d===(i.ownerDocument||s)&&f.push(d.defaultView||d.parentWindow||n)}for(h=0;(l=f[h++])&&!e.isPropagationStopped();)e.type=h>1?c:u.bindType||g,(r=(m._data(l,"events")||{})[e.type]&&m._data(l,"handle"))&&r.apply(l,t),(r=a&&l[a])&&r.apply&&W(l)&&(e.result=r.apply(l,t),!1===e.result&&e.preventDefault());if(e.type=g,!o&&!e.isDefaultPrevented()&&(!u._default||!1===u._default.apply(f.pop(),t))&&W(i)&&a&&i[g]&&!m.isWindow(i)){(d=i[a])&&(i[a]=null),m.event.triggered=g;try{i[g]()}catch(e){}m.event.triggered=void 0,d&&(i[a]=d)}return e.result}},dispatch:function(e){e=m.event.fix(e);var t,n,i,o,r,s,l=a.call(arguments),c=(m._data(this,"events")||{})[e.type]||[],u=m.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,e)){for(s=m.event.handlers.call(this,e,c),t=0;(o=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(i=((m.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,o,r,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<a;n++)void 0===i[o=(r=t[n]).selector+" "]&&(i[o]=r.needsContext?m(o,this).index(l)>-1:m.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[m.expando])return e;var t,n,i,o=e.type,r=e,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=ge.test(o)?this.mouseHooks:me.test(o)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,e=new m.Event(r),t=i.length;t--;)e[n=i[t]]=r[n];return e.target||(e.target=r.srcElement||s),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,r):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,r=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(o=(i=e.target.ownerDocument||s).documentElement,n=i.body,e.pageX=t.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==we()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===we()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(m.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return m.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var i=m.extend(new m.Event,n,{type:e,isSimulated:!0});m.event.trigger(i,null,t),i.isDefaultPrevented()&&n.preventDefault()}},m.removeEvent=s.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var i="on"+t;e.detachEvent&&(void 0===e[i]&&(e[i]=null),e.detachEvent(i,n))},m.Event=function(e,t){if(!(this instanceof m.Event))return new m.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?be:xe):this.type=e,t&&m.extend(this,t),this.timeStamp=e&&e.timeStamp||m.now(),this[m.expando]=!0},m.Event.prototype={constructor:m.Event,isDefaultPrevented:xe,isPropagationStopped:xe,isImmediatePropagationStopped:xe,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=be,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=be,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=be,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){m.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,o=e.handleObj;return i&&(i===this||m.contains(this,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),f.submit||(m.event.special.submit={setup:function(){if(m.nodeName(this,"form"))return!1;m.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=m.nodeName(t,"input")||m.nodeName(t,"button")?m.prop(t,"form"):void 0;n&&!m._data(n,"submit")&&(m.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),m._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&m.event.simulate("submit",this.parentNode,e))},teardown:function(){if(m.nodeName(this,"form"))return!1;m.event.remove(this,"._submit")}}),f.change||(m.event.special.change={setup:function(){if(fe.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(m.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),m.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),m.event.simulate("change",this,e)})),!1;m.event.add(this,"beforeactivate._change",function(e){var t=e.target;fe.test(t.nodeName)&&!m._data(t,"change")&&(m.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||m.event.simulate("change",this.parentNode,e)}),m._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return m.event.remove(this,"._change"),!fe.test(this.nodeName)}}),f.focusin||m.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){m.event.simulate(t,e.target,m.event.fix(e))};m.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=m._data(i,t);o||i.addEventListener(e,n,!0),m._data(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=m._data(i,t)-1;o?m._data(i,t,o):(i.removeEventListener(e,n,!0),m._removeData(i,t))}}}),m.fn.extend({on:function(e,t,n,i){return _e(this,e,t,n,i)},one:function(e,t,n,i){return _e(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,m(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=xe),this.each(function(){m.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){m.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return m.event.trigger(e,t,n,!0)}});var Ce=/ jQuery\d+="(?:null|\d+)"/g,Ee=new RegExp("<(?:"+re+")[\\s/>]","i"),Te=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Se=/^true\/(.*)/,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Le=se(s).appendChild(s.createElement("div"));function Oe(e,t){return m.nodeName(e,"table")&&m.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ae(e){return e.type=(null!==m.find.attr(e,"type"))+"/"+e.type,e}function De(e){var t=Se.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function je(e,t){if(1===t.nodeType&&m.hasData(e)){var n,i,o,r=m._data(e),s=m._data(t,r),a=r.events;if(a)for(n in delete s.handle,s.events={},a)for(i=0,o=a[n].length;i<o;i++)m.event.add(t,n,a[n][i]);s.data&&(s.data=m.extend({},s.data))}}function Ie(e,t){var n,i,o;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!f.noCloneEvent&&t[m.expando]){for(i in(o=m._data(t)).events)m.removeEvent(t,i,o.handle);t.removeAttribute(m.expando)}"script"===n&&t.text!==e.text?(Ae(t).text=e.text,De(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),f.html5Clone&&e.innerHTML&&!m.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&te.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function He(e,t,n,i){t=l.apply([],t);var o,r,s,a,c,u,d=0,h=e.length,p=h-1,g=t[0],v=m.isFunction(g);if(v||h>1&&"string"==typeof g&&!f.checkClone&&Ne.test(g))return e.each(function(o){var r=e.eq(o);v&&(t[0]=g.call(this,o,r.html())),He(r,t,n,i)});if(h&&(o=(u=pe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===u.childNodes.length&&(u=o),o||i)){for(s=(a=m.map(le(u,"script"),Ae)).length;d<h;d++)r=u,d!==p&&(r=m.clone(r,!0,!0),s&&m.merge(a,le(r,"script"))),n.call(e[d],r,d);if(s)for(c=a[a.length-1].ownerDocument,m.map(a,De),d=0;d<s;d++)r=a[d],ie.test(r.type||"")&&!m._data(r,"globalEval")&&m.contains(c,r)&&(r.src?m._evalUrl&&m._evalUrl(r.src):m.globalEval((r.text||r.textContent||r.innerHTML||"").replace(Pe,"")));u=o=null}return e}function Me(e,t,n){for(var i,o=t?m.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||m.cleanData(le(i)),i.parentNode&&(n&&m.contains(i.ownerDocument,i)&&ce(le(i,"script")),i.parentNode.removeChild(i));return e}m.extend({htmlPrefilter:function(e){return e.replace(Te,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a,l=m.contains(e.ownerDocument,e);if(f.html5Clone||m.isXMLDoc(e)||!Ee.test("<"+e.nodeName+">")?r=e.cloneNode(!0):(Le.innerHTML=e.outerHTML,Le.removeChild(r=Le.firstChild)),!(f.noCloneEvent&&f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||m.isXMLDoc(e)))for(i=le(r),a=le(e),s=0;null!=(o=a[s]);++s)i[s]&&Ie(o,i[s]);if(t)if(n)for(a=a||le(e),i=i||le(r),s=0;null!=(o=a[s]);s++)je(o,i[s]);else je(e,r);return(i=le(r,"script")).length>0&&ce(i,!l&&le(e,"script")),i=a=o=null,r},cleanData:function(e,t){for(var n,i,o,s,a=0,l=m.expando,c=m.cache,u=f.attributes,d=m.event.special;null!=(n=e[a]);a++)if((t||W(n))&&(s=(o=n[l])&&c[o])){if(s.events)for(i in s.events)d[i]?m.event.remove(n,i):m.removeEvent(n,i,s.handle);c[o]&&(delete c[o],u||void 0===n.removeAttribute?n[l]=void 0:n.removeAttribute(l),r.push(o))}}}),m.fn.extend({domManip:He,detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return ee(this,function(e){return void 0===e?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||s).createTextNode(e))},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&m.cleanData(le(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&m.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return m.clone(this,e,t)})},html:function(e){return ee(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Ce,""):void 0;if("string"==typeof e&&!ke.test(e)&&(f.htmlSerialize||!Ee.test(e))&&(f.leadingWhitespace||!oe.test(e))&&!ae[(ne.exec(e)||["",""])[1].toLowerCase()]){e=m.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(m.cleanData(le(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;m.inArray(this,e)<0&&(m.cleanData(le(this)),n&&n.replaceChild(t,this))},e)}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){m.fn[e]=function(e){for(var n,i=0,o=[],r=m(e),s=r.length-1;i<=s;i++)n=i===s?this:this.clone(!0),m(r[i])[t](n),c.apply(o,n.get());return this.pushStack(o)}});var Be,We={HTML:"block",BODY:"block"};function qe(e,t){var n=m(t.createElement(e)).appendTo(t.body),i=m.css(n[0],"display");return n.detach(),i}function Fe(e){var t=s,n=We[e];return n||("none"!==(n=qe(e,t))&&n||((t=((Be=(Be||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||Be[0].contentDocument).document).write(),t.close(),n=qe(e,t),Be.detach()),We[e]=n),n}var Re=/^margin/,$e=new RegExp("^("+U+")(?!px)[a-z%]+$","i"),Xe=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in o=n.apply(e,i||[]),t)e.style[r]=s[r];return o},ze=s.documentElement;!function(){var e,t,i,o,r,a,l=s.createElement("div"),c=s.createElement("div");function u(){var u,d,h=s.documentElement;h.appendChild(l),c.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",e=i=a=!1,t=r=!0,n.getComputedStyle&&(d=n.getComputedStyle(c),e="1%"!==(d||{}).top,a="2px"===(d||{}).marginLeft,i="4px"===(d||{width:"4px"}).width,c.style.marginRight="50%",t="4px"===(d||{marginRight:"4px"}).marginRight,(u=c.appendChild(s.createElement("div"))).style.cssText=c.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",u.style.marginRight=u.style.width="0",c.style.width="1px",r=!parseFloat((n.getComputedStyle(u)||{}).marginRight),c.removeChild(u)),c.style.display="none",(o=0===c.getClientRects().length)&&(c.style.display="",c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",c.childNodes[0].style.borderCollapse="separate",(u=c.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(o=0===u[0].offsetHeight)&&(u[0].style.display="",u[1].style.display="none",o=0===u[0].offsetHeight)),h.removeChild(l)}c.style&&(c.style.cssText="float:left;opacity:.5",f.opacity="0.5"===c.style.opacity,f.cssFloat=!!c.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===c.style.backgroundClip,(l=s.createElement("div")).style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",c.innerHTML="",l.appendChild(c),f.boxSizing=""===c.style.boxSizing||""===c.style.MozBoxSizing||""===c.style.WebkitBoxSizing,m.extend(f,{reliableHiddenOffsets:function(){return null==e&&u(),o},boxSizingReliable:function(){return null==e&&u(),i},pixelMarginRight:function(){return null==e&&u(),t},pixelPosition:function(){return null==e&&u(),e},reliableMarginRight:function(){return null==e&&u(),r},reliableMarginLeft:function(){return null==e&&u(),a}}))}();var Ue,Ye,Ke=/^(top|right|bottom|left)$/;function Ge(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}n.getComputedStyle?(Ue=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ye=function(e,t,n){var i,o,r,s,a=e.style;return""!==(s=(n=n||Ue(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||m.contains(e.ownerDocument,e)||(s=m.style(e,t)),n&&!f.pixelMarginRight()&&$e.test(s)&&Re.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0===s?s:s+""}):ze.currentStyle&&(Ue=function(e){return e.currentStyle},Ye=function(e,t,n){var i,o,r,s,a=e.style;return null==(s=(n=n||Ue(e))?n[t]:void 0)&&a&&a[t]&&(s=a[t]),$e.test(s)&&!Ke.test(t)&&(i=a.left,(r=(o=e.runtimeStyle)&&o.left)&&(o.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=i,r&&(o.left=r)),void 0===s?s:s+""||"auto"});var Ve=/alpha\([^)]*\)/i,Je=/opacity\s*=\s*([^)]*)/i,Qe=/^(none|table(?!-c[ea]).+)/,Ze=new RegExp("^("+U+")(.*)$","i"),et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],it=s.createElement("div").style;function ot(e){if(e in it)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=nt.length;n--;)if((e=nt[n]+t)in it)return e}function rt(e,t){for(var n,i,o,r=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(r[s]=m._data(i,"olddisplay"),n=i.style.display,t?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&G(i)&&(r[s]=m._data(i,"olddisplay",Fe(i.nodeName)))):(o=G(i),(n&&"none"!==n||!o)&&m._data(i,"olddisplay",o?n:m.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?r[s]||"":"none"));return e}function st(e,t,n){var i=Ze.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function at(e,t,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=m.css(e,n+K[r],!0,o)),i?("content"===n&&(s-=m.css(e,"padding"+K[r],!0,o)),"margin"!==n&&(s-=m.css(e,"border"+K[r]+"Width",!0,o))):(s+=m.css(e,"padding"+K[r],!0,o),"padding"!==n&&(s+=m.css(e,"border"+K[r]+"Width",!0,o)));return s}function lt(e,t,n){var i=!0,o="width"===t?e.offsetWidth:e.offsetHeight,r=Ue(e),s=f.boxSizing&&"border-box"===m.css(e,"boxSizing",!1,r);if(o<=0||null==o){if(((o=Ye(e,t,r))<0||null==o)&&(o=e.style[t]),$e.test(o))return o;i=s&&(f.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+at(e,t,n||(s?"border":"content"),i,r)+"px"}function ct(e,t,n,i,o){return new ct.prototype.init(e,t,n,i,o)}m.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:f.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=m.camelCase(t),l=e.style;if(t=m.cssProps[a]||(m.cssProps[a]=ot(a)||a),s=m.cssHooks[t]||m.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:l[t];if("string"===(r=typeof n)&&(o=Y.exec(n))&&o[1]&&(n=V(e,t,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(m.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var o,r,s,a=m.camelCase(t);return t=m.cssProps[a]||(m.cssProps[a]=ot(a)||a),(s=m.cssHooks[t]||m.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ye(e,t,i)),"normal"===r&&t in tt&&(r=tt[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),m.each(["height","width"],function(e,t){m.cssHooks[t]={get:function(e,n,i){if(n)return Qe.test(m.css(e,"display"))&&0===e.offsetWidth?Xe(e,et,function(){return lt(e,t,i)}):lt(e,t,i)},set:function(e,n,i){var o=i&&Ue(e);return st(0,n,i?at(e,t,i,f.boxSizing&&"border-box"===m.css(e,"boxSizing",!1,o),o):0)}}}),f.opacity||(m.cssHooks.opacity={get:function(e,t){return Je.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,o=m.isNumeric(t)?"alpha(opacity="+100*t+")":"",r=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===m.trim(r.replace(Ve,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=Ve.test(r)?r.replace(Ve,o):r+" "+o)}}),m.cssHooks.marginRight=Ge(f.reliableMarginRight,function(e,t){if(t)return Xe(e,{display:"inline-block"},Ye,[e,"marginRight"])}),m.cssHooks.marginLeft=Ge(f.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||(m.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-Xe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),m.each({margin:"",padding:"",border:"Width"},function(e,t){m.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+K[i]+t]=r[i]||r[i-2]||r[0];return o}},Re.test(e)||(m.cssHooks[e+t].set=st)}),m.fn.extend({css:function(e,t){return ee(this,function(e,t,n){var i,o,r={},s=0;if(m.isArray(t)){for(i=Ue(e),o=t.length;s<o;s++)r[t[s]]=m.css(e,t[s],!1,i);return r}return void 0!==n?m.style(e,t,n):m.css(e,t)},e,t,arguments.length>1)},show:function(){return rt(this,!0)},hide:function(){return rt(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){G(this)?m(this).show():m(this).hide()})}}),m.Tween=ct,ct.prototype={constructor:ct,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||m.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(m.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=m.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=m.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){m.fx.step[e.prop]?m.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[m.cssProps[e.prop]]&&!m.cssHooks[e.prop]?e.elem[e.prop]=e.now:m.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},m.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},m.fx=ct.prototype.init,m.fx.step={};var ut,dt,ht=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function ft(){return n.setTimeout(function(){ut=void 0}),ut=m.now()}function mt(e,t){var n,i={height:e},o=0;for(t=t?1:0;o<4;o+=2-t)i["margin"+(n=K[o])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function gt(e,t,n){for(var i,o=(vt.tweeners[t]||[]).concat(vt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function vt(e,t,n){var i,o,r=0,s=vt.prefilters.length,a=m.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=ut||ft(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:m.extend({},t),opts:m.extend(!0,{specialEasing:{},easing:m.easing._default},n),originalProperties:t,originalOptions:n,startTime:ut||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var i=m.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=m.camelCase(n)],r=e[n],m.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=m.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=vt.prefilters[r].call(c,e,u,c.opts))return m.isFunction(i.stop)&&(m._queueHooks(c.elem,c.opts.queue).stop=m.proxy(i.stop,i)),i;return m.map(u,gt,c),m.isFunction(c.opts.start)&&c.opts.start.call(e,c),m.fx.timer(m.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}m.Animation=m.extend(vt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return V(n.elem,e,Y.exec(t),n),n}]},tweener:function(e,t){m.isFunction(e)?(t=e,e=["*"]):e=e.match(I);for(var n,i=0,o=e.length;i<o;i++)n=e[i],vt.tweeners[n]=vt.tweeners[n]||[],vt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,u=this,d={},h=e.style,p=e.nodeType&&G(e),g=m._data(e,"fxshow");for(i in n.queue||(null==(a=m._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,u.always(function(){u.always(function(){a.unqueued--,m.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],"inline"===("none"===(c=m.css(e,"display"))?m._data(e,"olddisplay")||Fe(e.nodeName):c)&&"none"===m.css(e,"float")&&(f.inlineBlockNeedsLayout&&"inline"!==Fe(e.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.shrinkWrapBlocks()||u.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),t)if(o=t[i],ht.exec(o)){if(delete t[i],r=r||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;p=!0}d[i]=g&&g[i]||m.style(e,i)}else c=void 0;if(m.isEmptyObject(d))"inline"===("none"===c?Fe(e.nodeName):c)&&(h.display=c);else for(i in g?"hidden"in g&&(p=g.hidden):g=m._data(e,"fxshow",{}),r&&(g.hidden=!p),p?m(e).show():u.done(function(){m(e).hide()}),u.done(function(){var t;for(t in m._removeData(e,"fxshow"),d)m.style(e,t,d[t])}),d)s=gt(p?g[i]:0,i,u),i in g||(g[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(e,t){t?vt.prefilters.unshift(e):vt.prefilters.push(e)}}),m.speed=function(e,t,n){var i=e&&"object"==typeof e?m.extend({},e):{complete:n||!n&&t||m.isFunction(e)&&e,duration:e,easing:n&&t||t&&!m.isFunction(t)&&t};return i.duration=m.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in m.fx.speeds?m.fx.speeds[i.duration]:m.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m.isFunction(i.old)&&i.old.call(this),i.queue&&m.dequeue(this,i.queue)},i},m.fn.extend({fadeTo:function(e,t,n,i){return this.filter(G).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=m.isEmptyObject(e),r=m.speed(t,n,i),s=function(){var t=vt(this,m.extend({},e),r);(o||m._data(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=m.timers,s=m._data(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&pt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||m.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=m._data(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=m.timers,s=i?i.length:0;for(n.finish=!0,m.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),m.each(["toggle","show","hide"],function(e,t){var n=m.fn[t];m.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(mt(t,!0),e,i,o)}}),m.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){m.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),m.timers=[],m.fx.tick=function(){var e,t=m.timers,n=0;for(ut=m.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||m.fx.stop(),ut=void 0},m.fx.timer=function(e){m.timers.push(e),e()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){dt||(dt=n.setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){n.clearInterval(dt),dt=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(e,t){return e=m.fx&&m.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var o=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(o)}})},function(){var e,t=s.createElement("input"),n=s.createElement("div"),i=s.createElement("select"),o=i.appendChild(s.createElement("option"));(n=s.createElement("div")).setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),(e=n.getElementsByTagName("a")[0]).style.cssText="top:1px",f.getSetAttribute="t"!==n.className,f.style=/top/.test(e.getAttribute("style")),f.hrefNormalized="/a"===e.getAttribute("href"),f.checkOn=!!t.value,f.optSelected=o.selected,f.enctype=!!s.createElement("form").enctype,i.disabled=!0,f.optDisabled=!o.disabled,(t=s.createElement("input")).setAttribute("value",""),f.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),f.radioValue="t"===t.value}();var yt=/\r/g,bt=/[\x20\t\r\n\f]+/g;m.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=m.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,m(this).val()):e)?o="":"number"==typeof o?o+="":m.isArray(o)&&(o=m.map(o,function(e){return null==e?"":e+""})),(t=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=m.valHooks[o.type]||m.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(yt,""):null==n?"":n:void 0}}),m.extend({valHooks:{option:{get:function(e){var t=m.find.attr(e,"value");return null!=t?t:m.trim(m.text(e)).replace(bt," ")}},select:{get:function(e){for(var t,n,i=e.options,o=e.selectedIndex,r="select-one"===e.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(f.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!m.nodeName(n.parentNode,"optgroup"))){if(t=m(n).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,o=e.options,r=m.makeArray(t),s=o.length;s--;)if(i=o[s],m.inArray(m.valHooks.option.get(i),r)>-1)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),o}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(e,t){if(m.isArray(t))return e.checked=m.inArray(m(e).val(),t)>-1}},f.checkOn||(m.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xt,wt,_t=m.expr.attrHandle,Ct=/^(?:checked|selected)$/i,Et=f.getSetAttribute,Tt=f.input;m.fn.extend({attr:function(e,t){return ee(this,m.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){m.removeAttr(this,e)})}}),m.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?m.prop(e,t,n):(1===r&&m.isXMLDoc(e)||(t=t.toLowerCase(),o=m.attrHooks[t]||(m.expr.match.bool.test(t)?wt:xt)),void 0!==n?null===n?void m.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=m.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&m.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,o=0,r=t&&t.match(I);if(r&&1===e.nodeType)for(;n=r[o++];)i=m.propFix[n]||n,m.expr.match.bool.test(n)?Tt&&Et||!Ct.test(n)?e[i]=!1:e[m.camelCase("default-"+n)]=e[i]=!1:m.attr(e,n,""),e.removeAttribute(Et?n:i)}}),wt={set:function(e,t,n){return!1===t?m.removeAttr(e,n):Tt&&Et||!Ct.test(n)?e.setAttribute(!Et&&m.propFix[n]||n,n):e[m.camelCase("default-"+n)]=e[n]=!0,n}},m.each(m.expr.match.bool.source.match(/\w+/g),function(e,t){var n=_t[t]||m.find.attr;Tt&&Et||!Ct.test(t)?_t[t]=function(e,t,i){var o,r;return i||(r=_t[t],_t[t]=o,o=null!=n(e,t,i)?t.toLowerCase():null,_t[t]=r),o}:_t[t]=function(e,t,n){if(!n)return e[m.camelCase("default-"+t)]?t.toLowerCase():null}}),Tt&&Et||(m.attrHooks.value={set:function(e,t,n){if(!m.nodeName(e,"input"))return xt&&xt.set(e,t,n);e.defaultValue=t}}),Et||(xt={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},_t.id=_t.name=_t.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},m.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:xt.set},m.attrHooks.contenteditable={set:function(e,t,n){xt.set(e,""!==t&&t,n)}},m.each(["width","height"],function(e,t){m.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),f.style||(m.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var kt=/^(?:input|select|textarea|button|object)$/i,Nt=/^(?:a|area)$/i;m.fn.extend({prop:function(e,t){return ee(this,m.prop,e,t,arguments.length>1)},removeProp:function(e){return e=m.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),m.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&m.isXMLDoc(e)||(t=m.propFix[t]||t,o=m.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=m.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Nt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.hrefNormalized||m.each(["href","src"],function(e,t){m.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),f.optSelected||(m.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),f.enctype||(m.propFix.enctype="encoding");var St=/[\t\r\n\f]/g;function Pt(e){return m.attr(e,"class")||""}m.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(m.isFunction(e))return this.each(function(t){m(this).addClass(e.call(this,t,Pt(this)))});if("string"==typeof e&&e)for(t=e.match(I)||[];n=this[l++];)if(o=Pt(n),i=1===n.nodeType&&(" "+o+" ").replace(St," ")){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=m.trim(i))&&m.attr(n,"class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(m.isFunction(e))return this.each(function(t){m(this).removeClass(e.call(this,t,Pt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(I)||[];n=this[l++];)if(o=Pt(n),i=1===n.nodeType&&(" "+o+" ").replace(St," ")){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=m.trim(i))&&m.attr(n,"class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):m.isFunction(e)?this.each(function(n){m(this).toggleClass(e.call(this,n,Pt(this),t),t)}):this.each(function(){var t,i,o,r;if("string"===n)for(i=0,o=m(this),r=e.match(I)||[];t=r[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=Pt(this))&&m._data(this,"__className__",t),m.attr(this,"class",t||!1===e?"":m._data(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Pt(n)+" ").replace(St," ").indexOf(t)>-1)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){m.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),m.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Lt=n.location,Ot=m.now(),At=/\?/,Dt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(e){if(n.JSON&&n.JSON.parse)return n.JSON.parse(e+"");var t,i=null,o=m.trim(e+"");return o&&!m.trim(o.replace(Dt,function(e,n,o,r){return t&&n&&(i=0),0===i?e:(t=o||n,i+=!r-!o,"")}))?Function("return "+o)():m.error("Invalid JSON: "+e)},m.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{n.DOMParser?t=(new n.DOMParser).parseFromString(e,"text/xml"):((t=new n.ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e))}catch(e){t=void 0}return t&&t.documentElement&&!t.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+e),t};var jt=/#.*$/,It=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Mt=/^(?:GET|HEAD)$/,Bt=/^\/\//,Wt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,qt={},Ft={},Rt="*/".concat("*"),$t=Lt.href,Xt=Wt.exec($t.toLowerCase())||[];function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(I)||[];if(m.isFunction(n))for(;i=r[o++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ut(e,t,n,i){var o={},r=e===Ft;function s(a){var l;return o[a]=!0,m.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)}),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Yt(e,t){var n,i,o=m.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n||(n={}))[i]=t[i]);return n&&m.extend(!0,e,n),e}function Kt(e){return e.style&&e.style.display||m.css(e,"display")}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:$t,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Yt(Yt(e,m.ajaxSettings),t):Yt(m.ajaxSettings,e)},ajaxPrefilter:zt(qt),ajaxTransport:zt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,o,r,s,a,l,c,u,d=m.ajaxSetup({},t),h=d.context||d,p=d.context&&(h.nodeType||h.jquery)?m(h):m.event,f=m.Deferred(),g=m.Callbacks("once memory"),v=d.statusCode||{},y={},b={},x=0,w="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!u)for(u={};t=Ht.exec(s);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=b[n]=b[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)v[t]=[v[t],e[t]];else _.always(e[_.status]);return this},abort:function(e){var t=e||w;return c&&c.abort(t),C(0,t),this}};if(f.promise(_).complete=g.add,_.success=_.done,_.error=_.fail,d.url=((e||d.url||$t)+"").replace(jt,"").replace(Bt,Xt[1]+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=m.trim(d.dataType||"*").toLowerCase().match(I)||[""],null==d.crossDomain&&(i=Wt.exec(d.url.toLowerCase()),d.crossDomain=!(!i||i[1]===Xt[1]&&i[2]===Xt[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Xt[3]||("http:"===Xt[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=m.param(d.data,d.traditional)),Ut(qt,d,t,_),2===x)return _;for(o in(l=m.event&&d.global)&&0==m.active++&&m.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Mt.test(d.type),r=d.url,d.hasContent||(d.data&&(r=d.url+=(At.test(r)?"&":"?")+d.data,delete d.data),!1===d.cache&&(d.url=It.test(r)?r.replace(It,"$1_="+Ot++):r+(At.test(r)?"&":"?")+"_="+Ot++)),d.ifModified&&(m.lastModified[r]&&_.setRequestHeader("If-Modified-Since",m.lastModified[r]),m.etag[r]&&_.setRequestHeader("If-None-Match",m.etag[r])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&_.setRequestHeader("Content-Type",d.contentType),_.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Rt+"; q=0.01":""):d.accepts["*"]),d.headers)_.setRequestHeader(o,d.headers[o]);if(d.beforeSend&&(!1===d.beforeSend.call(h,_,d)||2===x))return _.abort();for(o in w="abort",{success:1,error:1,complete:1})_[o](d[o]);if(c=Ut(Ft,d,t,_)){if(_.readyState=1,l&&p.trigger("ajaxSend",[_,d]),2===x)return _;d.async&&d.timeout>0&&(a=n.setTimeout(function(){_.abort("timeout")},d.timeout));try{x=1,c.send(y,C)}catch(e){if(!(x<2))throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,i,o){var u,y,b,w,C,E=t;2!==x&&(x=2,a&&n.clearTimeout(a),c=void 0,s=o||"",_.readyState=e>0?4:0,u=e>=200&&e<300||304===e,i&&(w=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(s in a)if(a[s]&&a[s].test(o)){l.unshift(s);break}if(l[0]in n)r=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){r=s;break}i||(i=s)}r=r||i}if(r)return r!==l[0]&&l.unshift(r),n[r]}(d,_,i)),w=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(d,w,_,u),u?(d.ifModified&&((C=_.getResponseHeader("Last-Modified"))&&(m.lastModified[r]=C),(C=_.getResponseHeader("etag"))&&(m.etag[r]=C)),204===e||"HEAD"===d.type?E="nocontent":304===e?E="notmodified":(E=w.state,y=w.data,u=!(b=w.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),_.status=e,_.statusText=(t||E)+"",u?f.resolveWith(h,[y,E,_]):f.rejectWith(h,[_,E,b]),_.statusCode(v),v=void 0,l&&p.trigger(u?"ajaxSuccess":"ajaxError",[_,d,u?y:b]),g.fireWith(h,[_,E]),l&&(p.trigger("ajaxComplete",[_,d]),--m.active||m.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return m.get(e,t,n,"json")},getScript:function(e,t){return m.get(e,void 0,t,"script")}}),m.each(["get","post"],function(e,t){m[t]=function(e,n,i,o){return m.isFunction(n)&&(o=o||i,i=n,n=void 0),m.ajax(m.extend({url:e,type:t,dataType:o,data:n,success:i},m.isPlainObject(e)&&e))}}),m._evalUrl=function(e){return m.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},m.fn.extend({wrapAll:function(e){if(m.isFunction(e))return this.each(function(t){m(this).wrapAll(e.call(this,t))});if(this[0]){var t=m(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return m.isFunction(e)?this.each(function(t){m(this).wrapInner(e.call(this,t))}):this.each(function(){var t=m(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=m.isFunction(e);return this.each(function(n){m(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(e){return f.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:function(e){if(!m.contains(e.ownerDocument||s,e))return!0;for(;e&&1===e.nodeType;){if("none"===Kt(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}(e)},m.expr.filters.visible=function(e){return!m.expr.filters.hidden(e)};var Gt=/%20/g,Vt=/\[\]$/,Jt=/\r?\n/g,Qt=/^(?:submit|button|image|reset|file)$/i,Zt=/^(?:input|select|textarea|keygen)/i;function en(e,t,n,i){var o;if(m.isArray(t))m.each(t,function(t,o){n||Vt.test(e)?i(e,o):en(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)});else if(n||"object"!==m.type(t))i(e,t);else for(o in t)en(e+"["+o+"]",t[o],n,i)}m.param=function(e,t){var n,i=[],o=function(e,t){t=m.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(e)||e.jquery&&!m.isPlainObject(e))m.each(e,function(){o(this.name,this.value)});else for(n in e)en(n,e[n],t,o);return i.join("&").replace(Gt,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=m.prop(this,"elements");return e?m.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!m(this).is(":disabled")&&Zt.test(this.nodeName)&&!Qt.test(e)&&(this.checked||!te.test(e))}).map(function(e,t){var n=m(this).val();return null==n?null:m.isArray(n)?m.map(n,function(e){return{name:t.name,value:e.replace(Jt,"\r\n")}}):{name:t.name,value:n.replace(Jt,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==n.ActiveXObject?function(){return this.isLocal?sn():s.documentMode>8?rn():/^(get|post|head|put|delete|options)$/i.test(this.type)&&rn()||sn()}:rn;var tn=0,nn={},on=m.ajaxSettings.xhr();function rn(){try{return new n.XMLHttpRequest}catch(e){}}function sn(){try{return new n.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}n.attachEvent&&n.attachEvent("onunload",function(){for(var e in nn)nn[e](void 0,!0)}),f.cors=!!on&&"withCredentials"in on,(on=f.ajax=!!on)&&m.ajaxTransport(function(e){var t;if(!e.crossDomain||f.cors)return{send:function(i,o){var r,s=e.xhr(),a=++tn;if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)s[r]=e.xhrFields[r];for(r in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)void 0!==i[r]&&s.setRequestHeader(r,i[r]+"");s.send(e.hasContent&&e.data||null),t=function(n,i){var r,l,c;if(t&&(i||4===s.readyState))if(delete nn[a],t=void 0,s.onreadystatechange=m.noop,i)4!==s.readyState&&s.abort();else{c={},r=s.status,"string"==typeof s.responseText&&(c.text=s.responseText);try{l=s.statusText}catch(e){l=""}r||!e.isLocal||e.crossDomain?1223===r&&(r=204):r=c.text?200:404}c&&o(r,l,c,s.getAllResponseHeaders())},e.async?4===s.readyState?n.setTimeout(t):s.onreadystatechange=nn[a]=t:t()},abort:function(){t&&t(void 0,!0)}}}),m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return m.globalEval(e),e}}}),m.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),m.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=s.head||m("head")[0]||s.documentElement;return{send:function(i,o){(t=s.createElement("script")).async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||o(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var an=[],ln=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=an.pop()||m.expando+"_"+Ot++;return this[e]=!0,e}}),m.ajaxPrefilter("json jsonp",function(e,t,i){var o,r,s,a=!1!==e.jsonp&&(ln.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ln.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=m.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(ln,"$1"+o):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||m.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=n[o],n[o]=function(){s=arguments},i.always(function(){void 0===r?m(n).removeProp(o):n[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,an.push(o)),s&&m.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),m.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||s;var i=T.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=pe([e],t,o),o&&o.length&&m(o).remove(),m.merge([],i.childNodes))};var cn=m.fn.load;function un(e){return m.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}m.fn.load=function(e,t,n){if("string"!=typeof e&&cn)return cn.apply(this,arguments);var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=m.trim(e.slice(a,e.length)),e=e.slice(0,a)),m.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&m.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?m("<div>").append(m.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){m.fn[t]=function(e){return this.on(t,e)}}),m.expr.filters.animated=function(e){return m.grep(m.timers,function(t){return e===t.elem}).length},m.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=m.css(e,"position"),u=m(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=m.css(e,"top"),l=m.css(e,"left"),("absolute"===c||"fixed"===c)&&m.inArray("auto",[r,l])>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),m.isFunction(t)&&(t=t.call(e,n,m.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):u.css(d)}},m.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){m.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},o=this[0],r=o&&o.ownerDocument;return r?(t=r.documentElement,m.contains(t,o)?(void 0!==o.getBoundingClientRect&&(i=o.getBoundingClientRect()),n=un(r),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===m.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),m.nodeName(e[0],"html")||(n=e.offset()),n.top+=m.css(e[0],"borderTopWidth",!0),n.left+=m.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-m.css(i,"marginTop",!0),left:t.left-n.left-m.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!m.nodeName(e,"html")&&"static"===m.css(e,"position");)e=e.offsetParent;return e||ze})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);m.fn[e]=function(i){return ee(this,function(e,i,o){var r=un(e);if(void 0===o)return r?t in r?r[t]:r.document.documentElement[i]:e[i];r?r.scrollTo(n?m(r).scrollLeft():o,n?o:m(r).scrollTop()):e[i]=o},e,i,arguments.length,null)}}),m.each(["top","left"],function(e,t){m.cssHooks[t]=Ge(f.pixelPosition,function(e,n){if(n)return n=Ye(e,t),$e.test(n)?m(e).position()[t]+"px":n})}),m.each({Height:"height",Width:"width"},function(e,t){m.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){m.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return ee(this,function(t,n,i){var o;return m.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?m.css(t,n,s):m.style(t,n,i,s)},t,r?i:void 0,r,null)}})}),m.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,void 0===(i=function(){return m}.apply(t,[]))||(e.exports=i);var dn=n.jQuery,hn=n.$;return m.noConflict=function(e){return n.$===m&&(n.$=hn),e&&n.jQuery===m&&(n.jQuery=dn),m},o||(n.jQuery=n.$=m),m},"object"==typeof e.exports?e.exports=o.document?r(o,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return r(e)}:r(o)},function(e,t,n){"use strict";function i(){document.getElementsByClassName("tooltip")[0].remove()}function o(e){if(""===e){return function(e,t){const n=document.createElement("div");n.classList.add("tooltip"),n.innerHTML=e,t.appendChild(n)}("Вы ничего не ввели",document.getElementsByClassName("modal-window")[0]),document.getElementsByClassName("task-input")[0].addEventListener("focus",i),!0}return!1}n.d(t,"a",function(){return o})},function(e,t,n){"use strict";var i=n(2),o=n(10),r=n(0),s=n(4);var a=[{cat:["кот","кошка","котик"]},{dog:["собака","собачка"]},{apple:["яблоко","яблочко"]},{food:["еда","пища","продукты"]},{home:["дом","домик"]},{house:["дом","домик"]},{city:["город","мегаполис"]},{town:["город","поселок"]},{bear:["медведь"]},{tiger:["тигр"]}],l=n(1);let c,u;function d(){Object(l.c)(q);const e=document.getElementsByClassName("task-input")[0].value;if(!Object(s.a)(e)){const t=a[c][u];Object(r.d)(-1!==t.indexOf(e))}}function h(){const e=document.getElementsByClassName("modal-window")[0];c=Object(r.e)(0,a.length-1);const t=`Переведите слово: ${u=Object.keys(a[c])[0]}`;Object(i.a)(e),Object(r.c)(e,t),Object(r.b)(e),document.getElementsByClassName("task-input")[0].focus(),Object(r.a)(e,d),Object(l.c)(d)}var p=n(3),f=n.n(p);n(11);window.$=f.a;const m="Соберите слово из букв:",g=["yellow","blue","white","black","pink","red","brown","green","orange","purple","grey"];let v,y;function b(){Object(l.c)(q);const e=y;let t="";for(let e=0;e<y.length;e+=1)t+=document.getElementsByClassName("letters-container")[e].innerText;Object(r.d)(t===e)}function x(){const e=document.getElementsByClassName("modal-window")[0];v=Object(r.e)(0,g.length-1);const t=(y=g[v]).split("");Object(i.a)(e),Object(r.c)(e,m),function(e,t){const n=document.createElement("ul");n.id="sortable";const i=t.length;for(let e=0;e<i;e+=1){const e=document.createElement("li");e.classList.add("letters-container"),e.innerText=t.splice(Object(r.e)(0,t.length-1),1),n.appendChild(e)}e.appendChild(n),f()(()=>f()("#sortable").sortable()),document.getElementsByClassName("letters-container")[0].focus()}(e,t),Object(r.a)(e,b),Object(l.c)(b)}window.$=f.a;const w="Соберите предложение из слов:",_=["I am a good worker","My name is Ana","I like fresh vegetables","I am reading a book"];let C,E,T;function k(){Object(l.c)(q);const e=E;let t="";const n=document.getElementsByClassName("words-container").length;for(let e=0;e<n-1;e+=1)t+=`${document.getElementsByClassName("words-container")[e].innerText} `;t+=`${document.getElementsByClassName("words-container")[n-1].innerText}`,Object(r.d)(t===e)}function N(){const e=document.getElementsByClassName("modal-window")[0];C=Object(r.e)(0,_.length-1);const t=(E=_[C]).split(" ");Object(i.a)(e),Object(r.c)(e,w),function(e,t){const n=document.createElement("ul");n.id="sortable";const i=t.length;for(let e=0;e<i;e+=1){const e=document.createElement("li");e.classList.add("words-container"),e.innerText=t.splice(Object(r.e)(0,t.length-1),1),n.appendChild(e)}e.appendChild(n),f()(()=>f()("#sortable").sortable()),document.getElementsByClassName("words-container")[0].focus()}(e,t),Object(r.a)(e,k),Object(l.c)(k)}const S=["hat","flower","qween","egg","tree"];function P(){const e=document.getElementsByClassName("task-input")[0].value;if(Object(l.c)(q),!Object(s.a)(e)){const t=S[T];Object(r.d)(t===e)}}function L(){const e=document.getElementsByClassName("modal-window")[0];T=Object(r.e)(0,S.length-1);Object(i.a)(e),Object(r.c)(e,"Слово на картинке:");const t=document.createElement("img");t.classList.add("picture-for-word"),t.src=`./images/wordByPicture/${S[T]}.jpg`,e.appendChild(t),Object(r.b)(e),document.getElementsByClassName("task-input")[0].focus(),Object(r.a)(e,P),Object(l.c)(P)}let O,A;function D(){Object(l.c)(q);const e=document.getElementsByClassName("task-input")[0].value;if(!Object(s.a)(e)){const t=A;Object(r.d)(t===e)}}function j(){const e=document.getElementsByClassName("modal-window")[0];O=Object(r.e)(0,a.length-1),A=Object.keys(a[O])[0];Object(i.a)(e),Object(r.c)(e,"Запишите услышанное слово:"),Object(r.b)(e),document.getElementsByClassName("task-input")[0].focus(),Object(r.a)(e,D),Object(l.c)(D),function(e){const t=window.speechSynthesis,n=new SpeechSynthesisUtterance(e);t.speak(n)}(A)}n.d(t,"a",function(){return I}),n.d(t,"b",function(){return q});const I={};function H(e,t){const n=document.createElement("h3");n.innerText=t,e.appendChild(n)}function M(e,t,n,i){const o=document.createElement("button");o.classList.add(i),o.innerHTML=t,e.appendChild(o),o.addEventListener("click",n)}function B(e){switch(e){case 0:return o.a;case 1:return h;case 2:return x;default:return!1}}function W(e){switch(e.target){case document.getElementsByClassName("spell-button")[0]:I.animation="playerGoingToHit";break;case document.getElementsByClassName("spell-button")[1]:I.animation="playerThrowingGun";break;case document.getElementsByClassName("spell-button")[2]:I.animation="addPlayerHealth"}const t=document.getElementsByClassName("modal-window")[0];Object(i.a)(t),t.classList.add("choose-task-window"),H(t,"Выберите тип задания: "),M(t,"Математика",o.a,"task-type-button"),M(t,"Перевод слова",h,"task-type-button"),M(t,"Составить слово",x,"task-type-button"),M(t,"Составить предложение",N,"task-type-button"),M(t,"Аудирование",j,"task-type-button"),M(t,"Слово по картинке",L,"task-type-button"),Object(l.a)(B,"task-type-button",!1)}function q(){Object(i.c)();const e=document.getElementsByClassName("modal-window")[0];e.classList.add("spell-window"),H(e,"Выберите тип воздействия: "),M(e,"УДАР",W,"spell-button"),M(e,"БРОСОК",W,"spell-button"),M(e,"ЛЕЧЕНИЕ",W,"spell-button"),Object(l.a)(W,"spell-button",!0)}},function(e,t,n){"use strict";n.d(t,"b",function(){return g}),n.d(t,"a",function(){return _});const i=9,o=.5;let r=!1,s=!1,a=!1,l=!1,c=!1,u=!1;const d={path:"./images/characters/player/",parts:["leftLeg","rightLeg","body","gun","leftArm","rightArm","head"],coordX:[50,0,-5,80,60,-15,-37],coordY:[240,240,150,173,160,163,0],startX:400,startY:750},h={path:"./images/characters/monsters/",parts:["leftLeg","rightLeg","body","gun","leftArm","rightArm","head"],coordX:[50,0,-5,-130,60,-15,-37],coordY:[240,240,150,173,160,163,0],startX:1400,startY:750},p={player:{},monster:{},background:{},blood:{},light:{}},f={};requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||window.mozRequestAnimationFrame;const m=function(){let e=1,t=0;return function(){return 1===e?(t-=.1)<-1&&(e=-1):(t+=.1)>1&&(e=1),t}}();function g(e){switch(e){case"playerGoingToHit":r=!0;break;case"monsterGoingToHit":s=!0;break;case"playerThrowingGun":a=!0,f.flying.play();break;case"addPlayerHealth":l=!0,f.curing.play(),setTimeout(()=>{l=!1,f.curing.pause()},4e3)}}const v=function(){let e,t,n=.1,i=0;const o=h.startX+h.coordX[3],a=d.startX+d.coordX[3];return function(){return r?(t=d.startX+d.coordX[3],void 0===e&&(e=1,i=0)):s&&(t=h.startX+h.coordX[3],void 0===e&&(e=-1,i=0)),1===e?(i+=n,t>o&&(r?(n=0,i=0,c=!0,f.hitting.play(),setTimeout(()=>{n=.1,c=!1,f.hitting.pause()},2e3),e=-1):(s=!1,e=void 0))):(i-=n,t<a&&(s?(n=0,i=0,u=!0,f.hitting.play(),setTimeout(()=>{n=.1,u=!1,f.hitting.pause()},2e3),e=1):(r=!1,e=void 0))),i}}();const y=function(){let e,t=.1,n=0;const i=h.startX+h.coordX[3];return function(){return e=d.startX+d.coordX[3],n+=t,e>i&&t>0&&(t=0,n=0,c=!0,setTimeout(()=>{t=.1,c=!1,f.curing.pause(),a=!1,d.coordX[3]=80},2e3)),n}}();function b(){const e=function(){const e=document.getElementsByTagName("canvas")[0],t=e.getContext("2d");return e.width=e.width,t}();e.drawImage(p.background,0,0),l&&e.drawImage(p.light,p.light.startX,p.light.startY);for(let t=0;t<d.parts.length;t+=1){const n=p.player[d.parts[t]],i=d.startX+d.coordX[t],o=d.startY+d.coordY[t];e.drawImage(n,i,o)}for(let t=0;t<h.parts.length;t+=1){const n=p.monster[h.parts[t]],i=h.startX+h.coordX[t],o=h.startY+h.coordY[t];e.drawImage(n,i,o)}c&&e.drawImage(p.blood,p.blood.monsterStartX,p.blood.startY),u&&e.drawImage(p.blood,p.blood.playerStartX,p.blood.startY)}let x=Date.now();function w(){const e=Date.now();!function(){const e=m();let t=0,n=0;(r||s)&&(t=v()),a&&(n=y());for(let i=0;i<d.parts.length;i+=1){const s=d.parts[i];"rightLeg"===s?d.coordY[i]-=e:"leftLeg"===s?d.coordY[i]+=e:"leftArm"===s||"rightArm"===s?d.coordY[i]-=e*o:"gun"===s&&(a?d.coordX[i]+=n:d.coordY[i]-=e*o),r&&(d.coordX[i]+=t)}for(let n=0;n<h.parts.length;n+=1){const i=h.parts[n];"rightLeg"===i?h.coordY[n]-=e:"leftLeg"===i?h.coordY[n]+=e:"leftArm"!==i&&"rightArm"!==i&&"gun"!==i||(h.coordY[n]-=e*o),s&&(h.coordX[n]+=t)}}(),b(),x=e,requestAnimationFrame(w)}function _(){s=!1,f.flying=new Audio("./sounds/flying.mp3"),f.hitting=new Audio("./sounds/hitting.mp3"),f.curing=new Audio("./sounds/curing.mp3"),function(){p.background=new Image,p.background.src="./images/background.png",p.blood=new Image,p.blood.src="./images/characters/blood.png",p.blood.startY=840,p.blood.monsterStartX=1250,p.blood.playerStartX=430,p.light=new Image,p.light.src="./images/characters/light.png",p.light.startY=700,p.light.startX=290;for(let e=0;e<d.parts.length;e+=1)p.player[d.parts[e]]=new Image,p.player[d.parts[e]].src=`${d.path+d.parts[e]}.png`;for(let n=0;n<h.parts.length;n+=1)p.monster[h.parts[n]]=new Image,p.monster[h.parts[n]].src=`${h.path+(e=1,t=i,Math.floor(Math.random()*(t-e+1))+e)}/${h.parts[n]}.png`;var e,t}(),w()}},function(e,t,n){var i,o,r;o=[n(3)],void 0===(r="function"==typeof(i=function(e){return e.ui=e.ui||{},e.ui.version="1.12.1"})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";var i=n(2),o=n(6),r=n(9),s=n(5);function a(e,t){const n=document.createElement("div");n.classList.add("health-bar-container");const i=document.createElement("h3");i.classList.add("character-name"),i.innerText=t,n.appendChild(i);const o=document.createElement("div");o.classList.add("health-bar");const r=document.createElement("div");r.classList.add("percent-health-bar"),r.width=o.width,r.innerText="100%",o.appendChild(r),n.appendChild(o),e.appendChild(n)}var l=n(1);const c=1893,u=1076;function d(){const e=document.createElement("div");e.classList.add("game-container"),document.body.appendChild(e);const t=document.createElement("div");t.classList.add("health-container"),e.appendChild(t);const n=JSON.parse(localStorage.getItem("RecordsArr"));a(t,n[n.length-1].name),a(t,Object(r.a)()),function(e){const t=document.createElement("div");t.classList.add("attack-button"),t.innerText="НАНЕСТИ УДАР!",e.appendChild(t),document.getElementsByClassName("attack-button")[0].addEventListener("click",s.b)}(e),document.getElementsByClassName("attack-button")[0].focus(),Object(l.c)(s.b),function(e){const t=document.createElement("canvas");t.id="canvas",t.width=c,t.height=u,e.appendChild(t)}(e),Object(o.a)()}function h(){let e=document.getElementById("registration-input").value;if(""===e&&(e="Аноним"),null===localStorage.getItem("RecordsArr")){const t=[{name:`${e}`,killedMonsersAmmount:0}];localStorage.setItem("RecordsArr",JSON.stringify(t))}else{const t=JSON.parse(localStorage.getItem("RecordsArr"));t.push({name:`${e}`,killedMonsersAmmount:0}),localStorage.setItem("RecordsArr",JSON.stringify(t))}}function p(){Object(i.a)(document.body),d()}function f(){h(),p()}function m(){Object(i.c)();const e=document.getElementsByClassName("modal-window")[0];!function(e){const t=document.createElement("div");t.classList.add("registration-div-with-text"),t.innerHTML="<p>Добро пожаловать в «Заколдованное Королевство».</p><p>Вас ждут захватывающие сражения и сложные задания.Вы можете улучшать свои навыки, сражаясь с безжалостными монстрами.</p><p>Вперед, на встречу приключениям!</p>",e.appendChild(t)}(e),function(e){const t=document.createElement("label");t.classList.add("registration-label"),t.innerText="Ведите Ваше имя: ",t.htmlFor="registration-input",e.appendChild(t)}(e),function(e){const t=document.createElement("input");t.classList.add("registration-input"),t.setAttribute("type","text"),t.setAttribute("placeholder","Рыцарь Джек"),t.id="registration-input",e.appendChild(t),t.focus()}(e),function(e){const t=document.createElement("button");t.classList.add("play-button"),t.innerHTML="Играть!",e.appendChild(t),t.addEventListener("click",h),t.addEventListener("click",p)}(e),Object(l.b)(f)}function g(){const e=document.createElement("section");e.classList.add("head-section"),function(e){const t=document.createElement("nav"),n=document.createElement("ul");[{link:"#game-description",text:"Описание игры"},{link:"#screenshots",text:"Скриншоты"},{link:"#game-creator",text:"Создатель игры"}].forEach(e=>{const t=document.createElement("li"),i=document.createElement("a");i.innerText=e.text,i.href=e.link,t.appendChild(i),n.appendChild(t)}),t.appendChild(n),e.appendChild(t)}(e),function(e){const t=document.createElement("div");t.innerText="Заколдованное Королевство",e.appendChild(t)}(e),function(e){const t=document.createElement("div");t.id="game-description",t.classList.add("game-description"),t.innerHTML="<p>Добро пожаловать в Страну Чудес, дорогой друг!</p><p>Наша чудесная страна всегда славилась своими красотами: лесами,полями и горами, реками и озерами. Жители нашей маленькой страны всегда были бодры и веселы, с удовольствием трудились и с не меньшим отдыхали: пели, танцевали и радовались жизни.</p><p>Но однажды преключилась с нами беда - злые монстры захватили наши края.Теперь уже никто не поет и не веселится, города и деревни в запустении, грусть и тоска царит на наших землях.</p><p>Только ты, Юный Рыцарь, сможешь помочь нам - порази своим умом и смекалкой всех монстров и освободи наше Заколдованное Королевство от них. Поспеши, наши силы уже на исходе!</p>",e.appendChild(t)}(e),function(e){const t=document.createElement("button");t.classList.add("play-button"),t.innerHTML="Играть!",e.appendChild(t),t.addEventListener("click",m)}(e),Object(l.c)(m),document.body.appendChild(e)}function v(){Object(i.a)(document.body),g(),function(){const e=document.createElement("section");e.id="screenshots",e.classList.add("screenshots-section");const t=document.createElement("ul");[{url:"images/screenshots/1.PNG",text:"1. Регистрация"},{url:"images/screenshots/2.PNG",text:"2. Начало игры"},{url:"images/screenshots/3.PNG",text:"3. Выбор воздейстия"},{url:"images/screenshots/4.PNG",text:"4. Выбор задания"},{url:"images/screenshots/5.PNG",text:"5. Решениезадания"},{url:"images/screenshots/6.PNG",text:"6. Таблица рекордов"}].forEach(e=>{const n=document.createElement("li"),i=document.createElement("img");i.src=e.url;const o=document.createElement("div");o.innerHTML=e.text,n.appendChild(i),n.appendChild(o),t.appendChild(n)}),e.appendChild(t),document.body.appendChild(e)}(),function(){const e=document.createElement("section");e.id="game-creator",e.classList.add("contacts-section");const t=document.createElement("h2");t.innerHTML="Создатель игры: Гущо Анастасия",e.appendChild(t);const n=document.createElement("h3");n.innerHTML="Программист, junior web-developer",e.appendChild(n),[{class:"fa-phone",text:"+375(29) 160-13-34"},{class:"fa-at",text:"375291601334@mail.ru"},{class:"fa-map-marker-alt",text:"Belarus, Minsk, Jakyba Kolosa lane, 11, flat 7"}].forEach(t=>{const n=document.createElement("i");n.classList.add("fas"),n.classList.add(t.class);const i=document.createElement("p");i.innerText=`${t.text}`,i.prepend(n),e.appendChild(i)}),document.body.appendChild(e)}()}n.d(t,"a",function(){return v})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});const i=["Ужасный","Злобный","Сопливый","Трусливый","Вонючий","Страшный","Грозный","Угрюмый","Мрачный"],o=["Огр","Гном","Гоблин","Орк","Великан","Дровосек","Лилипут","Аватар","Человек"],r=["Том","Макс","Дима","Витя","Петя","Юра","Леша","Саша","Вася"];function s(e){const t=e.length-1;return e[Math.floor(Math.random()*(t-0+1))+0]}function a(){return`${s(i)} ${s(o)} ${s(r)}`}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return mathExample});var _tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_validation__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(4),_createSpellWindow_createSpellWindow__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(5),_playWithKeyboard_keyPressHandlers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),_modalWindow_modalWindow__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(2);const signs=["+","-","*"],minNum=0,maxNum=300;let example,str;function checkAnswer(){Object(_playWithKeyboard_keyPressHandlers__WEBPACK_IMPORTED_MODULE_3__.c)(_createSpellWindow_createSpellWindow__WEBPACK_IMPORTED_MODULE_2__.b);const userAns=document.getElementsByClassName("task-input")[0].value;if(!Object(_validation__WEBPACK_IMPORTED_MODULE_1__.a)(userAns)){const rightAns=`${eval(example)}`;Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.d)(userAns===rightAns)}}function mathExample(){const e=document.getElementsByClassName("modal-window")[0];example=`${Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.e)(minNum,maxNum)}${signs[Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.e)(0,signs.length-1)]}${Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.e)(minNum,maxNum)}`,str=`Решите пример: ${example}`,Object(_modalWindow_modalWindow__WEBPACK_IMPORTED_MODULE_4__.a)(e),Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.c)(e,str),Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.b)(e);const t=document.getElementsByClassName("task-input")[0];t.setAttribute("type","number"),t.focus(),Object(_tasksModalWindowElements__WEBPACK_IMPORTED_MODULE_0__.a)(e,checkAnswer),Object(_playWithKeyboard_keyPressHandlers__WEBPACK_IMPORTED_MODULE_3__.c)(checkAnswer)}},function(e,t,n){var i,o,r;
/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */o=[n(3),n(15),n(16),n(12),n(17),n(7),n(13)],void 0===(r="function"==typeof(i=function(e){return e.widget("ui.sortable",e.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,n){return e>=t&&e<t+n},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){var t=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),e.each(this.items,function(){t._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,n){var i=null,o=!1,r=this;return!(this.reverting||this.options.disabled||"static"===this.options.type||(this._refreshItems(t),e(t.target).parents().each(function(){if(e.data(this,r.widgetName+"-item")===r)return i=e(this),!1}),e.data(t.target,r.widgetName+"-item")===r&&(i=e(t.target)),!i||this.options.handle&&!n&&(e(this.options.handle,i).find("*").addBack().each(function(){this===t.target&&(o=!0)}),!o)||(this.currentItem=i,this._removeCurrentsFromItems(),0)))},_mouseStart:function(t,n,i){var o,r,s=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,s.cursorAt&&this._adjustOffsetFromHelper(s.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),s.containment&&this._setContainment(),s.cursor&&"auto"!==s.cursor&&(r=this.document.find("body"),this.storedCursor=r.css("cursor"),r.css("cursor",s.cursor),this.storedStylesheet=e("<style>*{ cursor: "+s.cursor+" !important; }</style>").appendTo(r)),s.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",s.opacity)),s.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",s.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!i)for(o=this.containers.length-1;o>=0;o--)this.containers[o]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!s.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var n,i,o,r,s=this.options,a=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<s.scrollSensitivity?this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop+s.scrollSpeed:t.pageY-this.overflowOffset.top<s.scrollSensitivity&&(this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop-s.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<s.scrollSensitivity?this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft+s.scrollSpeed:t.pageX-this.overflowOffset.left<s.scrollSensitivity&&(this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft-s.scrollSpeed)):(t.pageY-this.document.scrollTop()<s.scrollSensitivity?a=this.document.scrollTop(this.document.scrollTop()-s.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<s.scrollSensitivity&&(a=this.document.scrollTop(this.document.scrollTop()+s.scrollSpeed)),t.pageX-this.document.scrollLeft()<s.scrollSensitivity?a=this.document.scrollLeft(this.document.scrollLeft()-s.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<s.scrollSensitivity&&(a=this.document.scrollLeft(this.document.scrollLeft()+s.scrollSpeed))),!1!==a&&e.ui.ddmanager&&!s.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),n=this.items.length-1;n>=0;n--)if(i=this.items[n],o=i.item[0],(r=this._intersectsWithPointer(i))&&i.instance===this.currentContainer&&!(o===this.currentItem[0]||this.placeholder[1===r?"next":"prev"]()[0]===o||e.contains(this.placeholder[0],o)||"semi-dynamic"===this.options.type&&e.contains(this.element[0],o))){if(this.direction=1===r?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(i))break;this._rearrange(t,i),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,n){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var i=this,o=this.placeholder.offset(),r=this.options.axis,s={};r&&"x"!==r||(s.left=o.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),r&&"y"!==r||(s.top=o.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(s,parseInt(this.options.revert,10)||500,function(){i._clear(t)})}else this._clear(t,n);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new e.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var n=this._getItemsAsjQuery(t&&t.connected),i=[];return t=t||{},e(n).each(function(){var n=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);n&&i.push((t.key||n[1]+"[]")+"="+(t.key&&t.expression?n[1]:n[2]))}),!i.length&&t.key&&i.push(t.key+"="),i.join("&")},toArray:function(t){var n=this._getItemsAsjQuery(t&&t.connected),i=[];return t=t||{},n.each(function(){i.push(e(t.item||this).attr(t.attribute||"id")||"")}),i},_intersectsWith:function(e){var t=this.positionAbs.left,n=t+this.helperProportions.width,i=this.positionAbs.top,o=i+this.helperProportions.height,r=e.left,s=r+e.width,a=e.top,l=a+e.height,c=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||i+c>a&&i+c<l,h="y"===this.options.axis||t+u>r&&t+u<s,p=d&&h;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:r<t+this.helperProportions.width/2&&n-this.helperProportions.width/2<s&&a<i+this.helperProportions.height/2&&o-this.helperProportions.height/2<l},_intersectsWithPointer:function(e){var t,n,i="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),o="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),r=i&&o;return!!r&&(t=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection(),this.floating?"right"===n||"down"===t?2:1:t&&("down"===t?2:1))},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),n=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),i=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return this.floating&&o?"right"===o&&n||"left"===o&&!n:i&&("down"===i&&t||"up"===i&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){var n,i,o,r,s=[],a=[],l=this._connectWith();if(l&&t)for(n=l.length-1;n>=0;n--)for(o=e(l[n],this.document[0]),i=o.length-1;i>=0;i--)(r=e.data(o[i],this.widgetFullName))&&r!==this&&!r.options.disabled&&a.push([e.isFunction(r.options.items)?r.options.items.call(r.element):e(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);function c(){s.push(this)}for(a.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),n=a.length-1;n>=0;n--)a[n][0].each(c);return e(s)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var n=0;n<t.length;n++)if(t[n]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var n,i,o,r,s,a,l,c,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],h=this._connectWith();if(h&&this.ready)for(n=h.length-1;n>=0;n--)for(o=e(h[n],this.document[0]),i=o.length-1;i>=0;i--)(r=e.data(o[i],this.widgetFullName))&&r!==this&&!r.options.disabled&&(d.push([e.isFunction(r.options.items)?r.options.items.call(r.element[0],t,{item:this.currentItem}):e(r.options.items,r.element),r]),this.containers.push(r));for(n=d.length-1;n>=0;n--)for(s=d[n][1],a=d[n][0],i=0,c=a.length;i<c;i++)(l=e(a[i])).data(this.widgetName+"-item",s),u.push({item:l,instance:s,width:0,height:0,left:0,top:0})},refreshPositions:function(t){var n,i,o,r;for(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),n=this.items.length-1;n>=0;n--)(i=this.items[n]).instance!==this.currentContainer&&this.currentContainer&&i.item[0]!==this.currentItem[0]||(o=this.options.toleranceElement?e(this.options.toleranceElement,i.item):i.item,t||(i.width=o.outerWidth(),i.height=o.outerHeight()),r=o.offset(),i.left=r.left,i.top=r.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(n=this.containers.length-1;n>=0;n--)r=this.containers[n].element.offset(),this.containers[n].containerCache.left=r.left,this.containers[n].containerCache.top=r.top,this.containers[n].containerCache.width=this.containers[n].element.outerWidth(),this.containers[n].containerCache.height=this.containers[n].element.outerHeight();return this},_createPlaceholder:function(t){var n,i=(t=t||this).options;i.placeholder&&i.placeholder.constructor!==String||(n=i.placeholder,i.placeholder={element:function(){var i=t.currentItem[0].nodeName.toLowerCase(),o=e("<"+i+">",t.document[0]);return t._addClass(o,"ui-sortable-placeholder",n||t.currentItem[0].className)._removeClass(o,"ui-sortable-helper"),"tbody"===i?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(o)):"tr"===i?t._createTrPlaceholder(t.currentItem,o):"img"===i&&o.attr("src",t.currentItem.attr("src")),n||o.css("visibility","hidden"),o},update:function(e,o){n&&!i.forcePlaceholderSize||(o.height()||o.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),o.width()||o.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(i.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),i.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,n){var i=this;t.children().each(function(){e("<td>&#160;</td>",i.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(n)})},_contactContainers:function(t){var n,i,o,r,s,a,l,c,u,d,h=null,p=null;for(n=this.containers.length-1;n>=0;n--)if(!e.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(h&&e.contains(this.containers[n].element[0],h.element[0]))continue;h=this.containers[n],p=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",t,this._uiHash(this)),this.containers[n].containerCache.over=0);if(h)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(o=1e4,r=null,u=h.floating||this._isFloating(this.currentItem),s=u?"left":"top",a=u?"width":"height",d=u?"pageX":"pageY",i=this.items.length-1;i>=0;i--)e.contains(this.containers[p].element[0],this.items[i].item[0])&&this.items[i].item[0]!==this.currentItem[0]&&(l=this.items[i].item.offset()[s],c=!1,t[d]-l>this.items[i][a]/2&&(c=!0),Math.abs(t[d]-l)<o&&(o=Math.abs(t[d]-l),r=this.items[i],this.direction=c?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return void(this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1));r?this._rearrange(t,r,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var n=this.options,i=e.isFunction(n.helper)?e(n.helper.apply(this.element[0],[t,this.currentItem])):"clone"===n.helper?this.currentItem.clone():this.currentItem;return i.parents("body").length||e("parent"!==n.appendTo?n.appendTo:this.currentItem[0].parentNode)[0].appendChild(i[0]),i[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),i[0].style.width&&!n.forceHelperSize||i.width(this.currentItem.width()),i[0].style.height&&!n.forceHelperSize||i.height(this.currentItem.height()),i},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,n,i,o=this.options;"parent"===o.containment&&(o.containment=this.helper[0].parentNode),"document"!==o.containment&&"window"!==o.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===o.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===o.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(o.containment)||(t=e(o.containment)[0],n=e(o.containment).offset(),i="hidden"!==e(t).css("overflow"),this.containment=[n.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,n.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,n.left+(i?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,n.top+(i?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(t,n){n||(n=this.position);var i="absolute"===t?1:-1,o="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,r=/(html|body)/i.test(o[0].tagName);return{top:n.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():r?0:o.scrollTop())*i,left:n.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():r?0:o.scrollLeft())*i}},_generatePosition:function(t){var n,i,o=this.options,r=t.pageX,s=t.pageY,a="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(a[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(r=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(s=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(r=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(s=this.containment[3]+this.offset.click.top)),o.grid&&(n=this.originalPageY+Math.round((s-this.originalPageY)/o.grid[1])*o.grid[1],s=this.containment?n-this.offset.click.top>=this.containment[1]&&n-this.offset.click.top<=this.containment[3]?n:n-this.offset.click.top>=this.containment[1]?n-o.grid[1]:n+o.grid[1]:n,i=this.originalPageX+Math.round((r-this.originalPageX)/o.grid[0])*o.grid[0],r=this.containment?i-this.offset.click.left>=this.containment[0]&&i-this.offset.click.left<=this.containment[2]?i:i-this.offset.click.left>=this.containment[0]?i-o.grid[0]:i+o.grid[0]:i)),{top:s-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:a.scrollTop()),left:r-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:a.scrollLeft())}},_rearrange:function(e,t,n,i){n?n[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var o=this.counter;this._delay(function(){o===this.counter&&this.refreshPositions(!i)})},_clear:function(e,t){this.reverting=!1;var n,i=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(n in this._storedCSS)"auto"!==this._storedCSS[n]&&"static"!==this._storedCSS[n]||(this._storedCSS[n]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function o(e,t,n){return function(i){n._trigger(e,i,t._uiHash(t))}}for(this.fromOutside&&!t&&i.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||i.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(i.push(function(e){this._trigger("remove",e,this._uiHash())}),i.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),i.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),n=this.containers.length-1;n>=0;n--)t||i.push(o("deactivate",this,this.containers[n])),this.containers[n].containerCache.over&&(i.push(o("out",this,this.containers[n])),this.containers[n].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(n=0;n<i.length;n++)i[n].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===e.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(t){var n=t||this;return{helper:n.helper,placeholder:n.placeholder||e([]),position:n.position,originalPosition:n.originalPosition,offset:n.positionAbs,item:n.currentItem,sender:t?t.element:null}}})})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){var i,o,r;o=[n(3),n(7)],void 0===(r="function"==typeof(i=function(e){return e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){var i,o,r;
/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */o=[n(3),n(7)],void 0===(r="function"==typeof(i=function(e){var t,n=0,i=Array.prototype.slice;return e.cleanData=(t=e.cleanData,function(n){var i,o,r;for(r=0;null!=(o=n[r]);r++)try{(i=e._data(o,"events"))&&i.remove&&e(o).triggerHandler("remove")}catch(e){}t(n)}),e.widget=function(t,n,i){var o,r,s,a={},l=t.split(".")[0],c=l+"-"+(t=t.split(".")[1]);return i||(i=n,n=e.Widget),e.isArray(i)&&(i=e.extend.apply(null,[{}].concat(i))),e.expr[":"][c.toLowerCase()]=function(t){return!!e.data(t,c)},e[l]=e[l]||{},o=e[l][t],r=e[l][t]=function(e,t){if(!this._createWidget)return new r(e,t);arguments.length&&this._createWidget(e,t)},e.extend(r,o,{version:i.version,_proto:e.extend({},i),_childConstructors:[]}),(s=new n).options=e.widget.extend({},s.options),e.each(i,function(t,i){e.isFunction(i)?a[t]=function(){function e(){return n.prototype[t].apply(this,arguments)}function o(e){return n.prototype[t].apply(this,e)}return function(){var t,n=this._super,r=this._superApply;return this._super=e,this._superApply=o,t=i.apply(this,arguments),this._super=n,this._superApply=r,t}}():a[t]=i}),r.prototype=e.widget.extend(s,{widgetEventPrefix:o&&s.widgetEventPrefix||t},a,{constructor:r,namespace:l,widgetName:t,widgetFullName:c}),o?(e.each(o._childConstructors,function(t,n){var i=n.prototype;e.widget(i.namespace+"."+i.widgetName,r,n._proto)}),delete o._childConstructors):n._childConstructors.push(r),e.widget.bridge(t,r),r},e.widget.extend=function(t){for(var n,o,r=i.call(arguments,1),s=0,a=r.length;s<a;s++)for(n in r[s])o=r[s][n],r[s].hasOwnProperty(n)&&void 0!==o&&(e.isPlainObject(o)?t[n]=e.isPlainObject(t[n])?e.widget.extend({},t[n],o):e.widget.extend({},o):t[n]=o);return t},e.widget.bridge=function(t,n){var o=n.prototype.widgetFullName||t;e.fn[t]=function(r){var s="string"==typeof r,a=i.call(arguments,1),l=this;return s?this.length||"instance"!==r?this.each(function(){var n,i=e.data(this,o);return"instance"===r?(l=i,!1):i?e.isFunction(i[r])&&"_"!==r.charAt(0)?(n=i[r].apply(i,a))!==i&&void 0!==n?(l=n&&n.jquery?l.pushStack(n.get()):n,!1):void 0:e.error("no such method '"+r+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; attempted to call method '"+r+"'")}):l=void 0:(a.length&&(r=e.widget.extend.apply(null,[r].concat(a))),this.each(function(){var t=e.data(this,o);t?(t.option(r||{}),t._init&&t._init()):e.data(this,o,new n(r,this))})),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),this.classesElementLookup={},i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){var t=this;this._destroy(),e.each(this.classesElementLookup,function(e,n){t._removeClass(n,e)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:e.noop,widget:function(){return this.element},option:function(t,n){var i,o,r,s=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(s={},i=t.split("."),t=i.shift(),i.length){for(o=s[t]=e.widget.extend({},this.options[t]),r=0;r<i.length-1;r++)o[i[r]]=o[i[r]]||{},o=o[i[r]];if(t=i.pop(),1===arguments.length)return void 0===o[t]?null:o[t];o[t]=n}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];s[t]=n}return this._setOptions(s),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(t){var n,i,o;for(n in t)o=this.classesElementLookup[n],t[n]!==this.options.classes[n]&&o&&o.length&&(i=e(o.get()),this._removeClass(o,n),i.addClass(this._classes({element:i,keys:n,classes:t,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(t){var n=[],i=this;function o(o,r){var s,a;for(a=0;a<o.length;a++)s=i.classesElementLookup[o[a]]||e(),s=t.add?e(e.unique(s.get().concat(t.element.get()))):e(s.not(t.element).get()),i.classesElementLookup[o[a]]=s,n.push(o[a]),r&&t.classes[o[a]]&&n.push(t.classes[o[a]])}return t=e.extend({element:this.element,classes:this.options.classes||{}},t),this._on(t.element,{remove:"_untrackClassesElement"}),t.keys&&o(t.keys.match(/\S+/g)||[],!0),t.extra&&o(t.extra.match(/\S+/g)||[]),n.join(" ")},_untrackClassesElement:function(t){var n=this;e.each(n.classesElementLookup,function(i,o){-1!==e.inArray(t.target,o)&&(n.classesElementLookup[i]=e(o.not(t.target).get()))})},_removeClass:function(e,t,n){return this._toggleClass(e,t,n,!1)},_addClass:function(e,t,n){return this._toggleClass(e,t,n,!0)},_toggleClass:function(e,t,n,i){i="boolean"==typeof i?i:n;var o="string"==typeof e||null===e,r={extra:o?t:n,keys:o?e:t,element:o?this.element:e,add:i};return r.element.toggleClass(this._classes(r),i),this},_on:function(t,n,i){var o,r=this;"boolean"!=typeof t&&(i=n,n=t,t=!1),i?(n=o=e(n),this.bindings=this.bindings.add(n)):(i=n,n=this.element,o=this.widget()),e.each(i,function(i,s){function a(){if(t||!0!==r.options.disabled&&!e(this).hasClass("ui-state-disabled"))return("string"==typeof s?r[s]:s).apply(r,arguments)}"string"!=typeof s&&(a.guid=s.guid=s.guid||a.guid||e.guid++);var l=i.match(/^([\w:-]*)\s*(.*)$/),c=l[1]+r.eventNamespace,u=l[2];u?o.on(c,u,a):n.on(c,a)})},_off:function(t,n){n=(n||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.off(n).off(n),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){var n=this;return setTimeout(function(){return("string"==typeof e?n[e]:e).apply(n,arguments)},t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){this._addClass(e(t.currentTarget),null,"ui-state-hover")},mouseleave:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){this._addClass(e(t.currentTarget),null,"ui-state-focus")},focusout:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-focus")}})},_trigger:function(t,n,i){var o,r,s=this.options[t];if(i=i||{},(n=e.Event(n)).type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],r=n.originalEvent)for(o in r)o in n||(n[o]=r[o]);return this.element.trigger(n,i),!(e.isFunction(s)&&!1===s.apply(this.element[0],[n].concat(i))||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,n){e.Widget.prototype["_"+t]=function(i,o,r){var s;"string"==typeof o&&(o={effect:o});var a=o?!0===o||"number"==typeof o?n:o.effect||n:t;"number"==typeof(o=o||{})&&(o={duration:o}),s=!e.isEmptyObject(o),o.complete=r,o.delay&&i.delay(o.delay),s&&e.effects&&e.effects.effect[a]?i[t](o):a!==t&&i[a]?i[a](o.duration,o.easing,r):i.queue(function(n){e(this)[t](),r&&r.call(i[0]),n()})}}),e.widget})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";n.r(t);var i=n(8);Object(i.a)()},function(e,t,n){var i,o,r;
/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */o=[n(3),n(12),n(7),n(13)],void 0===(r="function"==typeof(i=function(e){var t=!1;return e(document).on("mouseup",function(){t=!1}),e.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).on("click."+this.widgetName,function(n){if(!0===e.data(n.target,t.widgetName+".preventClickEvent"))return e.removeData(n.target,t.widgetName+".preventClickEvent"),n.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(n){if(!t){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(n),this._mouseDownEvent=n;var i=this,o=1===n.which,r=!("string"!=typeof this.options.cancel||!n.target.nodeName)&&e(n.target).closest(this.options.cancel).length;return!(o&&!r&&this._mouseCapture(n)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(n)&&this._mouseDelayMet(n)&&(this._mouseStarted=!1!==this._mouseStart(n),!this._mouseStarted)?(n.preventDefault(),0):(!0===e.data(n.target,this.widgetName+".preventClickEvent")&&e.removeData(n.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),n.preventDefault(),t=!0,0)))}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||document.documentMode<9)&&!t.button)return this._mouseUp(t);if(!t.which)if(t.originalEvent.altKey||t.originalEvent.ctrlKey||t.originalEvent.metaKey||t.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,t),this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(n){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,n.target===this._mouseDownEvent.target&&e.data(n.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(n)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,t=!1,n.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){var i,o,r;
/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */o=[n(3),n(7)],void 0===(r="function"==typeof(i=function(e){return e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(n){return!!e.data(n,t)}}):function(t,n,i){return!!e.data(t,i[3])}})})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){var i,o,r;
/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */o=[n(3),n(7)],void 0===(r="function"==typeof(i=function(e){return e.fn.scrollParent=function(t){var n=this.css("position"),i="absolute"===n,o=t?/(auto|scroll|hidden)/:/(auto|scroll)/,r=this.parents().filter(function(){var t=e(this);return(!i||"static"!==t.css("position"))&&o.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==n&&r.length?r:e(this[0].ownerDocument||document)}})?i.apply(t,o):i)||(e.exports=r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,